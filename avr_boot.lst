
avr_boot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00007f58  00000fec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f58  00007000  00007000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ad  00800108  00800108  00000ff4  2**0
                  ALLOC
  3 .stab         00000420  00000000  00000000  00000ff4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000a7  00000000  00000000  00001414  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000060  00000000  00000000  000014bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000009a  00000000  00000000  0000151b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000fb2  00000000  00000000  000015b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000046f  00000000  00000000  00002567  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000008ca  00000000  00000000  000029d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000d0  00000000  00000000  000032a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f2  00000000  00000000  00003370  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000e5d  00000000  00000000  00003662  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000138  00000000  00000000  000044bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007000 <__vectors>:
    7000:	0c 94 34 38 	jmp	0x7068	; 0x7068 <__ctors_end>
    7004:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7008:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    700c:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7010:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7014:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7018:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    701c:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7020:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7024:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7028:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    702c:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7030:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7034:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7038:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    703c:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7040:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7044:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7048:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    704c:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7050:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7054:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7058:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    705c:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7060:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7064:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>

00007068 <__ctors_end>:
    7068:	11 24       	eor	r1, r1
    706a:	1f be       	out	0x3f, r1	; 63
    706c:	cf ef       	ldi	r28, 0xFF	; 255
    706e:	d8 e0       	ldi	r29, 0x08	; 8
    7070:	de bf       	out	0x3e, r29	; 62
    7072:	cd bf       	out	0x3d, r28	; 61

00007074 <__do_copy_data>:
    7074:	11 e0       	ldi	r17, 0x01	; 1
    7076:	a0 e0       	ldi	r26, 0x00	; 0
    7078:	b1 e0       	ldi	r27, 0x01	; 1
    707a:	e8 e5       	ldi	r30, 0x58	; 88
    707c:	ff e7       	ldi	r31, 0x7F	; 127
    707e:	02 c0       	rjmp	.+4      	; 0x7084 <.do_copy_data_start>

00007080 <.do_copy_data_loop>:
    7080:	05 90       	lpm	r0, Z+
    7082:	0d 92       	st	X+, r0

00007084 <.do_copy_data_start>:
    7084:	a8 30       	cpi	r26, 0x08	; 8
    7086:	b1 07       	cpc	r27, r17
    7088:	d9 f7       	brne	.-10     	; 0x7080 <.do_copy_data_loop>

0000708a <__do_clear_bss>:
    708a:	11 e0       	ldi	r17, 0x01	; 1
    708c:	a8 e0       	ldi	r26, 0x08	; 8
    708e:	b1 e0       	ldi	r27, 0x01	; 1
    7090:	01 c0       	rjmp	.+2      	; 0x7094 <.do_clear_bss_start>

00007092 <.do_clear_bss_loop>:
    7092:	1d 92       	st	X+, r1

00007094 <.do_clear_bss_start>:
    7094:	a5 3b       	cpi	r26, 0xB5	; 181
    7096:	b1 07       	cpc	r27, r17
    7098:	e1 f7       	brne	.-8      	; 0x7092 <.do_clear_bss_loop>
    709a:	0e 94 53 38 	call	0x70a6	; 0x70a6 <main>
    709e:	0c 94 aa 3f 	jmp	0x7f54	; 0x7f54 <_exit>

000070a2 <__bad_interrupt>:
    70a2:	0c 94 00 38 	jmp	0x7000	; 0x7000 <__vectors>

000070a6 <main>:
	return 0;
}


int main (void)
{
    70a6:	a2 e0       	ldi	r26, 0x02	; 2
    70a8:	b0 e0       	ldi	r27, 0x00	; 0
    70aa:	e9 e5       	ldi	r30, 0x59	; 89
    70ac:	f8 e3       	ldi	r31, 0x38	; 56
    70ae:	0c 94 75 3f 	jmp	0x7eea	; 0x7eea <__prologue_saves__+0x12>

    DDRB = DDRB | 2;	// sets digital pin 9 = OUTPUT
    70b2:	21 9a       	sbi	0x04, 1	; 4
	PORTB = PORTB & 0xFD; // sets digital pin 9 = LOW
    70b4:	29 98       	cbi	0x05, 1	; 5
	
	DWORD fa;	/* Flash address */
	WORD br;	/* Bytes read */


	pf_mount(&Fatfs);	/* Initialize file system */
    70b6:	8b e0       	ldi	r24, 0x0B	; 11
    70b8:	91 e0       	ldi	r25, 0x01	; 1
    70ba:	0e 94 9b 3c 	call	0x7936	; 0x7936 <pf_mount>
	if (pf_open("app.bin") == FR_OK) {	/* Open application file */
    70be:	80 e0       	ldi	r24, 0x00	; 0
    70c0:	91 e0       	ldi	r25, 0x01	; 1
    70c2:	0e 94 9a 3a 	call	0x7534	; 0x7534 <pf_open>
    70c6:	89 2b       	or	r24, r25
    70c8:	09 f0       	breq	.+2      	; 0x70cc <main+0x26>
    70ca:	54 c0       	rjmp	.+168    	; 0x7174 <main+0xce>
    70cc:	ee 24       	eor	r14, r14
    70ce:	ff 24       	eor	r15, r15
    70d0:	87 01       	movw	r16, r14
		for (fa = 0; fa < BOOT_ADR; fa += SPM_PAGESIZE) {	/* Update all application pages */
			memset(Buff, 0xFF, SPM_PAGESIZE);	/* Clear buffer */
			pf_read(Buff, SPM_PAGESIZE, &br);	/* Load a page data */
    70d2:	6e 01       	movw	r12, r28
    70d4:	08 94       	sec
    70d6:	c1 1c       	adc	r12, r1
    70d8:	d1 1c       	adc	r13, r1
			
			uint16_t j;
			
			for (j = br; j < SPM_PAGESIZE; j++) /* Pad the remaining last page with 0xFF so that comparison goes OK */
			Buff[j] = 0xFF;
    70da:	bb 24       	eor	r11, r11
    70dc:	ba 94       	dec	r11


	pf_mount(&Fatfs);	/* Initialize file system */
	if (pf_open("app.bin") == FR_OK) {	/* Open application file */
		for (fa = 0; fa < BOOT_ADR; fa += SPM_PAGESIZE) {	/* Update all application pages */
			memset(Buff, 0xFF, SPM_PAGESIZE);	/* Clear buffer */
    70de:	85 e3       	ldi	r24, 0x35	; 53
    70e0:	91 e0       	ldi	r25, 0x01	; 1
    70e2:	6f ef       	ldi	r22, 0xFF	; 255
    70e4:	70 e0       	ldi	r23, 0x00	; 0
    70e6:	40 e8       	ldi	r20, 0x80	; 128
    70e8:	50 e0       	ldi	r21, 0x00	; 0
    70ea:	0e 94 a3 3f 	call	0x7f46	; 0x7f46 <memset>
			pf_read(Buff, SPM_PAGESIZE, &br);	/* Load a page data */
    70ee:	85 e3       	ldi	r24, 0x35	; 53
    70f0:	91 e0       	ldi	r25, 0x01	; 1
    70f2:	60 e8       	ldi	r22, 0x80	; 128
    70f4:	70 e0       	ldi	r23, 0x00	; 0
    70f6:	a6 01       	movw	r20, r12
    70f8:	0e 94 b2 39 	call	0x7364	; 0x7364 <pf_read>
			
			uint16_t j;
			
			for (j = br; j < SPM_PAGESIZE; j++) /* Pad the remaining last page with 0xFF so that comparison goes OK */
    70fc:	29 81       	ldd	r18, Y+1	; 0x01
    70fe:	3a 81       	ldd	r19, Y+2	; 0x02
    7100:	f9 01       	movw	r30, r18
    7102:	eb 5c       	subi	r30, 0xCB	; 203
    7104:	fe 4f       	sbci	r31, 0xFE	; 254
    7106:	c9 01       	movw	r24, r18
    7108:	02 c0       	rjmp	.+4      	; 0x710e <main+0x68>
			Buff[j] = 0xFF;
    710a:	b1 92       	st	Z+, r11
			memset(Buff, 0xFF, SPM_PAGESIZE);	/* Clear buffer */
			pf_read(Buff, SPM_PAGESIZE, &br);	/* Load a page data */
			
			uint16_t j;
			
			for (j = br; j < SPM_PAGESIZE; j++) /* Pad the remaining last page with 0xFF so that comparison goes OK */
    710c:	01 96       	adiw	r24, 0x01	; 1
    710e:	80 38       	cpi	r24, 0x80	; 128
    7110:	91 05       	cpc	r25, r1
    7112:	d8 f3       	brcs	.-10     	; 0x710a <main+0x64>
			Buff[j] = 0xFF;
			PORTB = PORTB & 0xFD; // sets digital pin 9 = LOW			
    7114:	29 98       	cbi	0x05, 1	; 5
    7116:	f7 01       	movw	r30, r14
    7118:	a5 e3       	ldi	r26, 0x35	; 53
    711a:	b1 e0       	ldi	r27, 0x01	; 1
pagecmp(uint16_t addr, uint8_t *data)
{
	uint16_t i;

	for (i = 0; i < SPM_PAGESIZE; i++) {
		if (pgm_read_byte(addr++) != *data++)
    711c:	af 01       	movw	r20, r30
    711e:	4f 5f       	subi	r20, 0xFF	; 255
    7120:	5f 4f       	sbci	r21, 0xFF	; 255
    7122:	94 91       	lpm	r25, Z+
    7124:	8d 91       	ld	r24, X+
    7126:	98 17       	cp	r25, r24
    7128:	31 f4       	brne	.+12     	; 0x7136 <main+0x90>
static uint8_t
pagecmp(uint16_t addr, uint8_t *data)
{
	uint16_t i;

	for (i = 0; i < SPM_PAGESIZE; i++) {
    712a:	81 e0       	ldi	r24, 0x01	; 1
    712c:	a5 3b       	cpi	r26, 0xB5	; 181
    712e:	b8 07       	cpc	r27, r24
    7130:	79 f0       	breq	.+30     	; 0x7150 <main+0xaa>
    7132:	fa 01       	movw	r30, r20
    7134:	f3 cf       	rjmp	.-26     	; 0x711c <main+0x76>
			for (j = br; j < SPM_PAGESIZE; j++) /* Pad the remaining last page with 0xFF so that comparison goes OK */
			Buff[j] = 0xFF;
			PORTB = PORTB & 0xFD; // sets digital pin 9 = LOW			
			if (pagecmp(fa, Buff)) {			/* Only flash if page is changed */

				if (br) { 
    7136:	23 2b       	or	r18, r19
    7138:	51 f0       	breq	.+20     	; 0x714e <main+0xa8>
					flash_erase(fa);					/* Erase a page */
    713a:	c8 01       	movw	r24, r16
    713c:	b7 01       	movw	r22, r14
    713e:	0e 94 ff 3e 	call	0x7dfe	; 0x7dfe <flash_erase>
				    flash_write(fa, Buff);		/* Write it if the data is available */
    7142:	c8 01       	movw	r24, r16
    7144:	b7 01       	movw	r22, r14
    7146:	45 e3       	ldi	r20, 0x35	; 53
    7148:	51 e0       	ldi	r21, 0x01	; 1
    714a:	0e 94 0d 3f 	call	0x7e1a	; 0x7e1a <flash_write>
				}
				PORTB = PORTB | 2; // sets digital pin 9 = HIGH
    714e:	29 9a       	sbi	0x05, 1	; 5
	WORD br;	/* Bytes read */


	pf_mount(&Fatfs);	/* Initialize file system */
	if (pf_open("app.bin") == FR_OK) {	/* Open application file */
		for (fa = 0; fa < BOOT_ADR; fa += SPM_PAGESIZE) {	/* Update all application pages */
    7150:	80 e8       	ldi	r24, 0x80	; 128
    7152:	90 e0       	ldi	r25, 0x00	; 0
    7154:	a0 e0       	ldi	r26, 0x00	; 0
    7156:	b0 e0       	ldi	r27, 0x00	; 0
    7158:	e8 0e       	add	r14, r24
    715a:	f9 1e       	adc	r15, r25
    715c:	0a 1f       	adc	r16, r26
    715e:	1b 1f       	adc	r17, r27
    7160:	90 e0       	ldi	r25, 0x00	; 0
    7162:	e9 16       	cp	r14, r25
    7164:	90 e7       	ldi	r25, 0x70	; 112
    7166:	f9 06       	cpc	r15, r25
    7168:	90 e0       	ldi	r25, 0x00	; 0
    716a:	09 07       	cpc	r16, r25
    716c:	90 e0       	ldi	r25, 0x00	; 0
    716e:	19 07       	cpc	r17, r25
    7170:	09 f0       	breq	.+2      	; 0x7174 <main+0xce>
    7172:	b5 cf       	rjmp	.-150    	; 0x70de <main+0x38>
				PORTB = PORTB | 2; // sets digital pin 9 = HIGH
			}
		}
	}

	if (pgm_read_word(0) != 0xFFFF)		/* Start application if exist */
    7174:	20 e0       	ldi	r18, 0x00	; 0
    7176:	30 e0       	ldi	r19, 0x00	; 0
    7178:	f9 01       	movw	r30, r18
    717a:	85 91       	lpm	r24, Z+
    717c:	94 91       	lpm	r25, Z+
    717e:	8f 5f       	subi	r24, 0xFF	; 255
    7180:	9f 4f       	sbci	r25, 0xFF	; 255
    7182:	11 f0       	breq	.+4      	; 0x7188 <main+0xe2>
		((void(*)(void))0)();
    7184:	f9 01       	movw	r30, r18
    7186:	09 95       	icall
    7188:	ff cf       	rjmp	.-2      	; 0x7188 <main+0xe2>

0000718a <dir_rewind>:

static
FRESULT dir_rewind (
	DIR *dj			/* Pointer to directory object */
)
{
    718a:	a0 e0       	ldi	r26, 0x00	; 0
    718c:	b0 e0       	ldi	r27, 0x00	; 0
    718e:	eb ec       	ldi	r30, 0xCB	; 203
    7190:	f8 e3       	ldi	r31, 0x38	; 56
    7192:	0c 94 76 3f 	jmp	0x7eec	; 0x7eec <__prologue_saves__+0x14>
    7196:	6c 01       	movw	r12, r24
	CLUST clst;
	FATFS *fs = FatFs;
    7198:	c0 91 08 01 	lds	r28, 0x0108
    719c:	d0 91 09 01 	lds	r29, 0x0109


	dj->index = 0;
    71a0:	fc 01       	movw	r30, r24
    71a2:	11 82       	std	Z+1, r1	; 0x01
    71a4:	10 82       	st	Z, r1
	clst = dj->sclust;
    71a6:	24 81       	ldd	r18, Z+4	; 0x04
    71a8:	35 81       	ldd	r19, Z+5	; 0x05
    71aa:	46 81       	ldd	r20, Z+6	; 0x06
    71ac:	57 81       	ldd	r21, Z+7	; 0x07
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
    71ae:	21 30       	cpi	r18, 0x01	; 1
    71b0:	31 05       	cpc	r19, r1
    71b2:	41 05       	cpc	r20, r1
    71b4:	51 05       	cpc	r21, r1
    71b6:	09 f4       	brne	.+2      	; 0x71ba <dir_rewind+0x30>
    71b8:	5c c0       	rjmp	.+184    	; 0x7272 <dir_rewind+0xe8>
    71ba:	8e 81       	ldd	r24, Y+6	; 0x06
    71bc:	9f 81       	ldd	r25, Y+7	; 0x07
    71be:	a8 85       	ldd	r26, Y+8	; 0x08
    71c0:	b9 85       	ldd	r27, Y+9	; 0x09
    71c2:	28 17       	cp	r18, r24
    71c4:	39 07       	cpc	r19, r25
    71c6:	4a 07       	cpc	r20, r26
    71c8:	5b 07       	cpc	r21, r27
    71ca:	08 f0       	brcs	.+2      	; 0x71ce <dir_rewind+0x44>
    71cc:	52 c0       	rjmp	.+164    	; 0x7272 <dir_rewind+0xe8>
		return FR_DISK_ERR;
	if (_FS_FAT32 && !clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    71ce:	21 15       	cp	r18, r1
    71d0:	31 05       	cpc	r19, r1
    71d2:	41 05       	cpc	r20, r1
    71d4:	51 05       	cpc	r21, r1
    71d6:	39 f4       	brne	.+14     	; 0x71e6 <dir_rewind+0x5c>
    71d8:	88 81       	ld	r24, Y
    71da:	83 30       	cpi	r24, 0x03	; 3
    71dc:	21 f4       	brne	.+8      	; 0x71e6 <dir_rewind+0x5c>
		clst = (CLUST)fs->dirbase;
    71de:	2e 85       	ldd	r18, Y+14	; 0x0e
    71e0:	3f 85       	ldd	r19, Y+15	; 0x0f
    71e2:	48 89       	ldd	r20, Y+16	; 0x10
    71e4:	59 89       	ldd	r21, Y+17	; 0x11
	dj->clust = clst;						/* Current cluster */
    71e6:	f6 01       	movw	r30, r12
    71e8:	20 87       	std	Z+8, r18	; 0x08
    71ea:	31 87       	std	Z+9, r19	; 0x09
    71ec:	42 87       	std	Z+10, r20	; 0x0a
    71ee:	53 87       	std	Z+11, r21	; 0x0b
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
    71f0:	21 15       	cp	r18, r1
    71f2:	31 05       	cpc	r19, r1
    71f4:	41 05       	cpc	r20, r1
    71f6:	51 05       	cpc	r21, r1
    71f8:	81 f1       	breq	.+96     	; 0x725a <dir_rewind+0xd0>
)
{
	FATFS *fs = FatFs;


	clst -= 2;
    71fa:	8e ef       	ldi	r24, 0xFE	; 254
    71fc:	e8 2e       	mov	r14, r24
    71fe:	8f ef       	ldi	r24, 0xFF	; 255
    7200:	f8 2e       	mov	r15, r24
    7202:	8f ef       	ldi	r24, 0xFF	; 255
    7204:	08 2f       	mov	r16, r24
    7206:	8f ef       	ldi	r24, 0xFF	; 255
    7208:	18 2f       	mov	r17, r24
    720a:	e2 0e       	add	r14, r18
    720c:	f3 1e       	adc	r15, r19
    720e:	04 1f       	adc	r16, r20
    7210:	15 1f       	adc	r17, r21
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    7212:	8e 81       	ldd	r24, Y+6	; 0x06
    7214:	9f 81       	ldd	r25, Y+7	; 0x07
    7216:	a8 85       	ldd	r26, Y+8	; 0x08
    7218:	b9 85       	ldd	r27, Y+9	; 0x09
    721a:	02 97       	sbiw	r24, 0x02	; 2
    721c:	a1 09       	sbc	r26, r1
    721e:	b1 09       	sbc	r27, r1
    7220:	e8 16       	cp	r14, r24
    7222:	f9 06       	cpc	r15, r25
    7224:	0a 07       	cpc	r16, r26
    7226:	1b 07       	cpc	r17, r27
    7228:	28 f0       	brcs	.+10     	; 0x7234 <dir_rewind+0xaa>
    722a:	20 e0       	ldi	r18, 0x00	; 0
    722c:	30 e0       	ldi	r19, 0x00	; 0
    722e:	40 e0       	ldi	r20, 0x00	; 0
    7230:	50 e0       	ldi	r21, 0x00	; 0
    7232:	17 c0       	rjmp	.+46     	; 0x7262 <dir_rewind+0xd8>
	return (DWORD)clst * fs->csize + fs->database;
    7234:	2a 81       	ldd	r18, Y+2	; 0x02
    7236:	30 e0       	ldi	r19, 0x00	; 0
    7238:	40 e0       	ldi	r20, 0x00	; 0
    723a:	50 e0       	ldi	r21, 0x00	; 0
    723c:	c8 01       	movw	r24, r16
    723e:	b7 01       	movw	r22, r14
    7240:	0e 94 2b 3f 	call	0x7e56	; 0x7e56 <__mulsi3>
    7244:	9b 01       	movw	r18, r22
    7246:	ac 01       	movw	r20, r24
    7248:	8a 89       	ldd	r24, Y+18	; 0x12
    724a:	9b 89       	ldd	r25, Y+19	; 0x13
    724c:	ac 89       	ldd	r26, Y+20	; 0x14
    724e:	bd 89       	ldd	r27, Y+21	; 0x15
    7250:	28 0f       	add	r18, r24
    7252:	39 1f       	adc	r19, r25
    7254:	4a 1f       	adc	r20, r26
    7256:	5b 1f       	adc	r21, r27
    7258:	04 c0       	rjmp	.+8      	; 0x7262 <dir_rewind+0xd8>
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
		return FR_DISK_ERR;
	if (_FS_FAT32 && !clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = (CLUST)fs->dirbase;
	dj->clust = clst;						/* Current cluster */
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
    725a:	2e 85       	ldd	r18, Y+14	; 0x0e
    725c:	3f 85       	ldd	r19, Y+15	; 0x0f
    725e:	48 89       	ldd	r20, Y+16	; 0x10
    7260:	59 89       	ldd	r21, Y+17	; 0x11
    7262:	f6 01       	movw	r30, r12
    7264:	24 87       	std	Z+12, r18	; 0x0c
    7266:	35 87       	std	Z+13, r19	; 0x0d
    7268:	46 87       	std	Z+14, r20	; 0x0e
    726a:	57 87       	std	Z+15, r21	; 0x0f
    726c:	20 e0       	ldi	r18, 0x00	; 0
    726e:	30 e0       	ldi	r19, 0x00	; 0
    7270:	02 c0       	rjmp	.+4      	; 0x7276 <dir_rewind+0xec>

	return FR_OK;	/* Seek succeeded */
    7272:	21 e0       	ldi	r18, 0x01	; 1
    7274:	30 e0       	ldi	r19, 0x00	; 0
}
    7276:	c9 01       	movw	r24, r18
    7278:	cd b7       	in	r28, 0x3d	; 61
    727a:	de b7       	in	r29, 0x3e	; 62
    727c:	e8 e0       	ldi	r30, 0x08	; 8
    727e:	0c 94 92 3f 	jmp	0x7f24	; 0x7f24 <__epilogue_restores__+0x14>

00007282 <get_fat>:

static
CLUST get_fat (	/* 1:IO error, Else:Cluster status */
	CLUST clst	/* Cluster# to get the link information */
)
{
    7282:	a4 e0       	ldi	r26, 0x04	; 4
    7284:	b0 e0       	ldi	r27, 0x00	; 0
    7286:	e7 e4       	ldi	r30, 0x47	; 71
    7288:	f9 e3       	ldi	r31, 0x39	; 57
    728a:	0c 94 7a 3f 	jmp	0x7ef4	; 0x7ef4 <__prologue_saves__+0x1c>
    728e:	8b 01       	movw	r16, r22
    7290:	9c 01       	movw	r18, r24
	WORD wc, bc, ofs;
	BYTE buf[4];
	FATFS *fs = FatFs;
    7292:	e0 91 08 01 	lds	r30, 0x0108
    7296:	f0 91 09 01 	lds	r31, 0x0109


	if (clst < 2 || clst >= fs->n_fatent)	/* Range check */
    729a:	62 30       	cpi	r22, 0x02	; 2
    729c:	71 05       	cpc	r23, r1
    729e:	81 05       	cpc	r24, r1
    72a0:	91 05       	cpc	r25, r1
    72a2:	08 f4       	brcc	.+2      	; 0x72a6 <get_fat+0x24>
    72a4:	55 c0       	rjmp	.+170    	; 0x7350 <get_fat+0xce>
    72a6:	86 81       	ldd	r24, Z+6	; 0x06
    72a8:	97 81       	ldd	r25, Z+7	; 0x07
    72aa:	a0 85       	ldd	r26, Z+8	; 0x08
    72ac:	b1 85       	ldd	r27, Z+9	; 0x09
    72ae:	08 17       	cp	r16, r24
    72b0:	19 07       	cpc	r17, r25
    72b2:	2a 07       	cpc	r18, r26
    72b4:	3b 07       	cpc	r19, r27
    72b6:	08 f0       	brcs	.+2      	; 0x72ba <get_fat+0x38>
    72b8:	4b c0       	rjmp	.+150    	; 0x7350 <get_fat+0xce>
		return 1;

	switch (fs->fs_type) {
    72ba:	80 81       	ld	r24, Z
    72bc:	82 30       	cpi	r24, 0x02	; 2
    72be:	21 f0       	breq	.+8      	; 0x72c8 <get_fat+0x46>
    72c0:	83 30       	cpi	r24, 0x03	; 3
    72c2:	09 f0       	breq	.+2      	; 0x72c6 <get_fat+0x44>
    72c4:	45 c0       	rjmp	.+138    	; 0x7350 <get_fat+0xce>
    72c6:	1e c0       	rjmp	.+60     	; 0x7304 <get_fat+0x82>
		}
		wc = LD_WORD(buf);
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
#endif
	case FS_FAT16 :
		if (disk_readp(buf, fs->fatbase + clst / 256, (WORD)(((WORD)clst % 256) * 2), 2)) break;
    72c8:	77 27       	eor	r23, r23
    72ca:	63 2f       	mov	r22, r19
    72cc:	52 2f       	mov	r21, r18
    72ce:	41 2f       	mov	r20, r17
    72d0:	82 85       	ldd	r24, Z+10	; 0x0a
    72d2:	93 85       	ldd	r25, Z+11	; 0x0b
    72d4:	a4 85       	ldd	r26, Z+12	; 0x0c
    72d6:	b5 85       	ldd	r27, Z+13	; 0x0d
    72d8:	48 0f       	add	r20, r24
    72da:	59 1f       	adc	r21, r25
    72dc:	6a 1f       	adc	r22, r26
    72de:	7b 1f       	adc	r23, r27
    72e0:	98 01       	movw	r18, r16
    72e2:	30 70       	andi	r19, 0x00	; 0
    72e4:	22 0f       	add	r18, r18
    72e6:	33 1f       	adc	r19, r19
    72e8:	ce 01       	movw	r24, r28
    72ea:	01 96       	adiw	r24, 0x01	; 1
    72ec:	02 e0       	ldi	r16, 0x02	; 2
    72ee:	10 e0       	ldi	r17, 0x00	; 0
    72f0:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <disk_readp>
    72f4:	89 2b       	or	r24, r25
    72f6:	61 f5       	brne	.+88     	; 0x7350 <get_fat+0xce>
		return LD_WORD(buf);
    72f8:	89 81       	ldd	r24, Y+1	; 0x01
    72fa:	9a 81       	ldd	r25, Y+2	; 0x02
    72fc:	9c 01       	movw	r18, r24
    72fe:	40 e0       	ldi	r20, 0x00	; 0
    7300:	50 e0       	ldi	r21, 0x00	; 0
    7302:	2a c0       	rjmp	.+84     	; 0x7358 <get_fat+0xd6>
#if _FS_FAT32
	case FS_FAT32 :
		if (disk_readp(buf, fs->fatbase + clst / 128, (WORD)(((WORD)clst % 128) * 4), 4)) break;
    7304:	b9 01       	movw	r22, r18
    7306:	a8 01       	movw	r20, r16
    7308:	27 e0       	ldi	r18, 0x07	; 7
    730a:	76 95       	lsr	r23
    730c:	67 95       	ror	r22
    730e:	57 95       	ror	r21
    7310:	47 95       	ror	r20
    7312:	2a 95       	dec	r18
    7314:	d1 f7       	brne	.-12     	; 0x730a <get_fat+0x88>
    7316:	82 85       	ldd	r24, Z+10	; 0x0a
    7318:	93 85       	ldd	r25, Z+11	; 0x0b
    731a:	a4 85       	ldd	r26, Z+12	; 0x0c
    731c:	b5 85       	ldd	r27, Z+13	; 0x0d
    731e:	48 0f       	add	r20, r24
    7320:	59 1f       	adc	r21, r25
    7322:	6a 1f       	adc	r22, r26
    7324:	7b 1f       	adc	r23, r27
    7326:	98 01       	movw	r18, r16
    7328:	2f 77       	andi	r18, 0x7F	; 127
    732a:	30 70       	andi	r19, 0x00	; 0
    732c:	22 0f       	add	r18, r18
    732e:	33 1f       	adc	r19, r19
    7330:	22 0f       	add	r18, r18
    7332:	33 1f       	adc	r19, r19
    7334:	ce 01       	movw	r24, r28
    7336:	01 96       	adiw	r24, 0x01	; 1
    7338:	04 e0       	ldi	r16, 0x04	; 4
    733a:	10 e0       	ldi	r17, 0x00	; 0
    733c:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <disk_readp>
    7340:	89 2b       	or	r24, r25
    7342:	31 f4       	brne	.+12     	; 0x7350 <get_fat+0xce>
		return LD_DWORD(buf) & 0x0FFFFFFF;
    7344:	29 81       	ldd	r18, Y+1	; 0x01
    7346:	3a 81       	ldd	r19, Y+2	; 0x02
    7348:	4b 81       	ldd	r20, Y+3	; 0x03
    734a:	5c 81       	ldd	r21, Y+4	; 0x04
    734c:	5f 70       	andi	r21, 0x0F	; 15
    734e:	04 c0       	rjmp	.+8      	; 0x7358 <get_fat+0xd6>
    7350:	21 e0       	ldi	r18, 0x01	; 1
    7352:	30 e0       	ldi	r19, 0x00	; 0
    7354:	40 e0       	ldi	r20, 0x00	; 0
    7356:	50 e0       	ldi	r21, 0x00	; 0
#endif
	}

	return 1;	/* An error occured at the disk I/O layer */
}
    7358:	b9 01       	movw	r22, r18
    735a:	ca 01       	movw	r24, r20
    735c:	24 96       	adiw	r28, 0x04	; 4
    735e:	e4 e0       	ldi	r30, 0x04	; 4
    7360:	0c 94 96 3f 	jmp	0x7f2c	; 0x7f2c <__epilogue_restores__+0x1c>

00007364 <pf_read>:
FRESULT pf_read (
	void* buff,		/* Pointer to the read buffer (NULL:Forward data to the stream)*/
	WORD btr,		/* Number of bytes to read */
	WORD* br		/* Pointer to number of bytes read */
)
{
    7364:	a0 e0       	ldi	r26, 0x00	; 0
    7366:	b0 e0       	ldi	r27, 0x00	; 0
    7368:	e8 eb       	ldi	r30, 0xB8	; 184
    736a:	f9 e3       	ldi	r31, 0x39	; 57
    736c:	0c 94 6e 3f 	jmp	0x7edc	; 0x7edc <__prologue_saves__+0x4>
    7370:	3c 01       	movw	r6, r24
    7372:	6b 01       	movw	r12, r22
    7374:	4a 01       	movw	r8, r20
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	WORD rcnt;
	BYTE cs, *rbuff = buff;
	FATFS *fs = FatFs;
    7376:	c0 91 08 01 	lds	r28, 0x0108
    737a:	d0 91 09 01 	lds	r29, 0x0109


	*br = 0;
    737e:	fa 01       	movw	r30, r20
    7380:	11 82       	std	Z+1, r1	; 0x01
    7382:	10 82       	st	Z, r1
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    7384:	20 97       	sbiw	r28, 0x00	; 0
    7386:	19 f4       	brne	.+6      	; 0x738e <pf_read+0x2a>
    7388:	26 e0       	ldi	r18, 0x06	; 6
    738a:	30 e0       	ldi	r19, 0x00	; 0
    738c:	cd c0       	rjmp	.+410    	; 0x7528 <pf_read+0x1c4>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
    738e:	89 81       	ldd	r24, Y+1	; 0x01
    7390:	80 fd       	sbrc	r24, 0
    7392:	03 c0       	rjmp	.+6      	; 0x739a <pf_read+0x36>
    7394:	25 e0       	ldi	r18, 0x05	; 5
    7396:	30 e0       	ldi	r19, 0x00	; 0
    7398:	c7 c0       	rjmp	.+398    	; 0x7528 <pf_read+0x1c4>
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
    739a:	2a 8d       	ldd	r18, Y+26	; 0x1a
    739c:	3b 8d       	ldd	r19, Y+27	; 0x1b
    739e:	4c 8d       	ldd	r20, Y+28	; 0x1c
    73a0:	5d 8d       	ldd	r21, Y+29	; 0x1d
    73a2:	8e 89       	ldd	r24, Y+22	; 0x16
    73a4:	9f 89       	ldd	r25, Y+23	; 0x17
    73a6:	a8 8d       	ldd	r26, Y+24	; 0x18
    73a8:	b9 8d       	ldd	r27, Y+25	; 0x19
    73aa:	28 1b       	sub	r18, r24
    73ac:	39 0b       	sbc	r19, r25
    73ae:	4a 0b       	sbc	r20, r26
    73b0:	5b 0b       	sbc	r21, r27
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */
    73b2:	cb 01       	movw	r24, r22
    73b4:	a0 e0       	ldi	r26, 0x00	; 0
    73b6:	b0 e0       	ldi	r27, 0x00	; 0
    73b8:	28 17       	cp	r18, r24
    73ba:	39 07       	cpc	r19, r25
    73bc:	4a 07       	cpc	r20, r26
    73be:	5b 07       	cpc	r21, r27
    73c0:	08 f4       	brcc	.+2      	; 0x73c4 <pf_read+0x60>
    73c2:	69 01       	movw	r12, r18
{
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	WORD rcnt;
	BYTE cs, *rbuff = buff;
    73c4:	53 01       	movw	r10, r6
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fr_abort;
			fs->dsect = sect + cs;
		}
		rcnt = (WORD)(512 - (fs->fptr % 512));		/* Get partial sector data from sector buffer */
    73c6:	41 2c       	mov	r4, r1
    73c8:	72 e0       	ldi	r23, 0x02	; 2
    73ca:	57 2e       	mov	r5, r23
    73cc:	a3 c0       	rjmp	.+326    	; 0x7514 <pf_read+0x1b0>

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
		if ((fs->fptr % 512) == 0) {				/* On the sector boundary? */
    73ce:	2e 89       	ldd	r18, Y+22	; 0x16
    73d0:	3f 89       	ldd	r19, Y+23	; 0x17
    73d2:	48 8d       	ldd	r20, Y+24	; 0x18
    73d4:	59 8d       	ldd	r21, Y+25	; 0x19
    73d6:	da 01       	movw	r26, r20
    73d8:	c9 01       	movw	r24, r18
    73da:	91 70       	andi	r25, 0x01	; 1
    73dc:	a0 70       	andi	r26, 0x00	; 0
    73de:	b0 70       	andi	r27, 0x00	; 0
    73e0:	00 97       	sbiw	r24, 0x00	; 0
    73e2:	a1 05       	cpc	r26, r1
    73e4:	b1 05       	cpc	r27, r1
    73e6:	09 f0       	breq	.+2      	; 0x73ea <pf_read+0x86>
    73e8:	60 c0       	rjmp	.+192    	; 0x74aa <pf_read+0x146>
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
    73ea:	da 01       	movw	r26, r20
    73ec:	c9 01       	movw	r24, r18
    73ee:	69 e0       	ldi	r22, 0x09	; 9
    73f0:	b6 95       	lsr	r27
    73f2:	a7 95       	ror	r26
    73f4:	97 95       	ror	r25
    73f6:	87 95       	ror	r24
    73f8:	6a 95       	dec	r22
    73fa:	d1 f7       	brne	.-12     	; 0x73f0 <pf_read+0x8c>
    73fc:	fa 80       	ldd	r15, Y+2	; 0x02
    73fe:	fa 94       	dec	r15
    7400:	f8 22       	and	r15, r24
			if (!cs) {								/* On the cluster boundary? */
    7402:	d1 f4       	brne	.+52     	; 0x7438 <pf_read+0xd4>
				clst = (fs->fptr == 0) ?			/* On the top of the file? */
    7404:	21 15       	cp	r18, r1
    7406:	31 05       	cpc	r19, r1
    7408:	41 05       	cpc	r20, r1
    740a:	51 05       	cpc	r21, r1
    740c:	29 f4       	brne	.+10     	; 0x7418 <pf_read+0xb4>
    740e:	6e 8d       	ldd	r22, Y+30	; 0x1e
    7410:	7f 8d       	ldd	r23, Y+31	; 0x1f
    7412:	88 a1       	ldd	r24, Y+32	; 0x20
    7414:	99 a1       	ldd	r25, Y+33	; 0x21
    7416:	06 c0       	rjmp	.+12     	; 0x7424 <pf_read+0xc0>
    7418:	6a a1       	ldd	r22, Y+34	; 0x22
    741a:	7b a1       	ldd	r23, Y+35	; 0x23
    741c:	8c a1       	ldd	r24, Y+36	; 0x24
    741e:	9d a1       	ldd	r25, Y+37	; 0x25
    7420:	0e 94 41 39 	call	0x7282	; 0x7282 <get_fat>
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fr_abort;
    7424:	62 30       	cpi	r22, 0x02	; 2
    7426:	71 05       	cpc	r23, r1
    7428:	81 05       	cpc	r24, r1
    742a:	91 05       	cpc	r25, r1
    742c:	08 f4       	brcc	.+2      	; 0x7430 <pf_read+0xcc>
    742e:	79 c0       	rjmp	.+242    	; 0x7522 <pf_read+0x1be>
				fs->curr_clust = clst;				/* Update current cluster */
    7430:	6a a3       	std	Y+34, r22	; 0x22
    7432:	7b a3       	std	Y+35, r23	; 0x23
    7434:	8c a3       	std	Y+36, r24	; 0x24
    7436:	9d a3       	std	Y+37, r25	; 0x25
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    7438:	00 91 08 01 	lds	r16, 0x0108
    743c:	10 91 09 01 	lds	r17, 0x0109


	clst -= 2;
    7440:	2a a1       	ldd	r18, Y+34	; 0x22
    7442:	3b a1       	ldd	r19, Y+35	; 0x23
    7444:	4c a1       	ldd	r20, Y+36	; 0x24
    7446:	5d a1       	ldd	r21, Y+37	; 0x25
    7448:	22 50       	subi	r18, 0x02	; 2
    744a:	30 40       	sbci	r19, 0x00	; 0
    744c:	40 40       	sbci	r20, 0x00	; 0
    744e:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    7450:	f8 01       	movw	r30, r16
    7452:	86 81       	ldd	r24, Z+6	; 0x06
    7454:	97 81       	ldd	r25, Z+7	; 0x07
    7456:	a0 85       	ldd	r26, Z+8	; 0x08
    7458:	b1 85       	ldd	r27, Z+9	; 0x09
    745a:	02 97       	sbiw	r24, 0x02	; 2
    745c:	a1 09       	sbc	r26, r1
    745e:	b1 09       	sbc	r27, r1
    7460:	28 17       	cp	r18, r24
    7462:	39 07       	cpc	r19, r25
    7464:	4a 07       	cpc	r20, r26
    7466:	5b 07       	cpc	r21, r27
    7468:	08 f0       	brcs	.+2      	; 0x746c <pf_read+0x108>
    746a:	5b c0       	rjmp	.+182    	; 0x7522 <pf_read+0x1be>
	return (DWORD)clst * fs->csize + fs->database;
    746c:	62 81       	ldd	r22, Z+2	; 0x02
    746e:	70 e0       	ldi	r23, 0x00	; 0
    7470:	80 e0       	ldi	r24, 0x00	; 0
    7472:	90 e0       	ldi	r25, 0x00	; 0
    7474:	0e 94 2b 3f 	call	0x7e56	; 0x7e56 <__mulsi3>
    7478:	9b 01       	movw	r18, r22
    747a:	ac 01       	movw	r20, r24
    747c:	f8 01       	movw	r30, r16
    747e:	82 89       	ldd	r24, Z+18	; 0x12
    7480:	93 89       	ldd	r25, Z+19	; 0x13
    7482:	a4 89       	ldd	r26, Z+20	; 0x14
    7484:	b5 89       	ldd	r27, Z+21	; 0x15
    7486:	28 0f       	add	r18, r24
    7488:	39 1f       	adc	r19, r25
    748a:	4a 1f       	adc	r20, r26
    748c:	5b 1f       	adc	r21, r27
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fr_abort;
				fs->curr_clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fr_abort;
    748e:	21 15       	cp	r18, r1
    7490:	31 05       	cpc	r19, r1
    7492:	41 05       	cpc	r20, r1
    7494:	51 05       	cpc	r21, r1
    7496:	09 f4       	brne	.+2      	; 0x749a <pf_read+0x136>
    7498:	44 c0       	rjmp	.+136    	; 0x7522 <pf_read+0x1be>
			fs->dsect = sect + cs;
    749a:	2f 0d       	add	r18, r15
    749c:	31 1d       	adc	r19, r1
    749e:	41 1d       	adc	r20, r1
    74a0:	51 1d       	adc	r21, r1
    74a2:	2e a3       	std	Y+38, r18	; 0x26
    74a4:	3f a3       	std	Y+39, r19	; 0x27
    74a6:	48 a7       	std	Y+40, r20	; 0x28
    74a8:	59 a7       	std	Y+41, r21	; 0x29
		}
		rcnt = (WORD)(512 - (fs->fptr % 512));		/* Get partial sector data from sector buffer */
    74aa:	2e 89       	ldd	r18, Y+22	; 0x16
    74ac:	3f 89       	ldd	r19, Y+23	; 0x17
    74ae:	31 70       	andi	r19, 0x01	; 1
    74b0:	c2 01       	movw	r24, r4
    74b2:	82 1b       	sub	r24, r18
    74b4:	93 0b       	sbc	r25, r19
    74b6:	76 01       	movw	r14, r12
    74b8:	8c 15       	cp	r24, r12
    74ba:	9d 05       	cpc	r25, r13
    74bc:	08 f4       	brcc	.+2      	; 0x74c0 <pf_read+0x15c>
    74be:	7c 01       	movw	r14, r24
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (WORD)(fs->fptr % 512), rcnt);
    74c0:	61 14       	cp	r6, r1
    74c2:	71 04       	cpc	r7, r1
    74c4:	19 f4       	brne	.+6      	; 0x74cc <pf_read+0x168>
    74c6:	80 e0       	ldi	r24, 0x00	; 0
    74c8:	90 e0       	ldi	r25, 0x00	; 0
    74ca:	01 c0       	rjmp	.+2      	; 0x74ce <pf_read+0x16a>
    74cc:	c5 01       	movw	r24, r10
    74ce:	4e a1       	ldd	r20, Y+38	; 0x26
    74d0:	5f a1       	ldd	r21, Y+39	; 0x27
    74d2:	68 a5       	ldd	r22, Y+40	; 0x28
    74d4:	79 a5       	ldd	r23, Y+41	; 0x29
    74d6:	87 01       	movw	r16, r14
    74d8:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <disk_readp>
		if (dr) goto fr_abort;
    74dc:	89 2b       	or	r24, r25
    74de:	09 f5       	brne	.+66     	; 0x7522 <pf_read+0x1be>
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
    74e0:	c7 01       	movw	r24, r14
    74e2:	a0 e0       	ldi	r26, 0x00	; 0
    74e4:	b0 e0       	ldi	r27, 0x00	; 0
    74e6:	2e 89       	ldd	r18, Y+22	; 0x16
    74e8:	3f 89       	ldd	r19, Y+23	; 0x17
    74ea:	48 8d       	ldd	r20, Y+24	; 0x18
    74ec:	59 8d       	ldd	r21, Y+25	; 0x19
    74ee:	28 0f       	add	r18, r24
    74f0:	39 1f       	adc	r19, r25
    74f2:	4a 1f       	adc	r20, r26
    74f4:	5b 1f       	adc	r21, r27
    74f6:	2e 8b       	std	Y+22, r18	; 0x16
    74f8:	3f 8b       	std	Y+23, r19	; 0x17
    74fa:	48 8f       	std	Y+24, r20	; 0x18
    74fc:	59 8f       	std	Y+25, r21	; 0x19
    74fe:	ae 0c       	add	r10, r14
    7500:	bf 1c       	adc	r11, r15
		btr -= rcnt; *br += rcnt;
    7502:	ce 18       	sub	r12, r14
    7504:	df 08       	sbc	r13, r15
    7506:	f4 01       	movw	r30, r8
    7508:	80 81       	ld	r24, Z
    750a:	91 81       	ldd	r25, Z+1	; 0x01
    750c:	8e 0d       	add	r24, r14
    750e:	9f 1d       	adc	r25, r15
    7510:	91 83       	std	Z+1, r25	; 0x01
    7512:	80 83       	st	Z, r24
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
    7514:	c1 14       	cp	r12, r1
    7516:	d1 04       	cpc	r13, r1
    7518:	09 f0       	breq	.+2      	; 0x751c <pf_read+0x1b8>
    751a:	59 cf       	rjmp	.-334    	; 0x73ce <pf_read+0x6a>
    751c:	20 e0       	ldi	r18, 0x00	; 0
    751e:	30 e0       	ldi	r19, 0x00	; 0
    7520:	03 c0       	rjmp	.+6      	; 0x7528 <pf_read+0x1c4>
	}

	return FR_OK;

fr_abort:
	fs->flag = 0;
    7522:	19 82       	std	Y+1, r1	; 0x01
    7524:	21 e0       	ldi	r18, 0x01	; 1
    7526:	30 e0       	ldi	r19, 0x00	; 0
	return FR_DISK_ERR;
}
    7528:	c9 01       	movw	r24, r18
    752a:	cd b7       	in	r28, 0x3d	; 61
    752c:	de b7       	in	r29, 0x3e	; 62
    752e:	e0 e1       	ldi	r30, 0x10	; 16
    7530:	0c 94 8a 3f 	jmp	0x7f14	; 0x7f14 <__epilogue_restores__+0x4>

00007534 <pf_open>:
/*-----------------------------------------------------------------------*/

FRESULT pf_open (
	const char *path	/* Pointer to the file name */
)
{
    7534:	ae e3       	ldi	r26, 0x3E	; 62
    7536:	b0 e0       	ldi	r27, 0x00	; 0
    7538:	e0 ea       	ldi	r30, 0xA0	; 160
    753a:	fa e3       	ldi	r31, 0x3A	; 58
    753c:	0c 94 6c 3f 	jmp	0x7ed8	; 0x7ed8 <__prologue_saves__>
    7540:	4c 01       	movw	r8, r24
	FRESULT res;
	DIR dj;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
    7542:	60 90 08 01 	lds	r6, 0x0108
    7546:	70 90 09 01 	lds	r7, 0x0109


	if (!fs)						/* Check file system */
    754a:	61 14       	cp	r6, r1
    754c:	71 04       	cpc	r7, r1
    754e:	19 f4       	brne	.+6      	; 0x7556 <pf_open+0x22>
    7550:	26 e0       	ldi	r18, 0x06	; 6
    7552:	30 e0       	ldi	r19, 0x00	; 0
    7554:	92 c1       	rjmp	.+804    	; 0x787a <pf_open+0x346>
		return FR_NOT_ENABLED;

	fs->flag = 0;
    7556:	f3 01       	movw	r30, r6
    7558:	11 82       	std	Z+1, r1	; 0x01
	dj.fn = sp;
    755a:	ce 01       	movw	r24, r28
    755c:	01 96       	adiw	r24, 0x01	; 1
    755e:	98 8b       	std	Y+16, r25	; 0x10
    7560:	8f 87       	std	Y+15, r24	; 0x0f
    7562:	03 c0       	rjmp	.+6      	; 0x756a <pf_open+0x36>
)
{
	FRESULT res;


	while (*path == ' ') path++;		/* Skip leading spaces */
    7564:	08 94       	sec
    7566:	81 1c       	adc	r8, r1
    7568:	91 1c       	adc	r9, r1
    756a:	f4 01       	movw	r30, r8
    756c:	80 81       	ld	r24, Z
    756e:	80 32       	cpi	r24, 0x20	; 32
    7570:	c9 f3       	breq	.-14     	; 0x7564 <pf_open+0x30>
	if (*path == '/') path++;			/* Strip heading separator */
    7572:	8f 32       	cpi	r24, 0x2F	; 47
    7574:	19 f4       	brne	.+6      	; 0x757c <pf_open+0x48>
    7576:	08 94       	sec
    7578:	81 1c       	adc	r8, r1
    757a:	91 1c       	adc	r9, r1
	dj->sclust = 0;						/* Set start directory (always root dir) */
    757c:	19 8a       	std	Y+17, r1	; 0x11
    757e:	1a 8a       	std	Y+18, r1	; 0x12
    7580:	1b 8a       	std	Y+19, r1	; 0x13
    7582:	1c 8a       	std	Y+20, r1	; 0x14

	if ((BYTE)*path <= ' ') {			/* Null path means the root directory */
    7584:	f4 01       	movw	r30, r8
    7586:	80 81       	ld	r24, Z
    7588:	81 32       	cpi	r24, 0x21	; 33
    758a:	50 f4       	brcc	.+20     	; 0x75a0 <pf_open+0x6c>
		res = dir_rewind(dj);
    758c:	ce 01       	movw	r24, r28
    758e:	0d 96       	adiw	r24, 0x0d	; 13
    7590:	0e 94 c5 38 	call	0x718a	; 0x718a <dir_rewind>
    7594:	9c 01       	movw	r18, r24
		dir[0] = 0;
    7596:	1d 8e       	std	Y+29, r1	; 0x1d
		return FR_NOT_ENABLED;

	fs->flag = 0;
	dj.fn = sp;
	res = follow_path(&dj, dir, path);	/* Follow the file path */
	if (res != FR_OK) return res;		/* Follow failed */
    7598:	00 97       	sbiw	r24, 0x00	; 0
    759a:	09 f4       	brne	.+2      	; 0x759e <pf_open+0x6a>
    759c:	3b c1       	rjmp	.+630    	; 0x7814 <pf_open+0x2e0>
    759e:	6d c1       	rjmp	.+730    	; 0x787a <pf_open+0x346>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    75a0:	b0 e2       	ldi	r27, 0x20	; 32
    75a2:	4b 2e       	mov	r4, r27

	res = dir_rewind(dj);			/* Rewind directory object */
	if (res != FR_OK) return res;

	do {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
    75a4:	ad e1       	ldi	r26, 0x1D	; 29
    75a6:	2a 2e       	mov	r2, r26
    75a8:	31 2c       	mov	r3, r1
    75aa:	2c 0e       	add	r2, r28
    75ac:	3d 1e       	adc	r3, r29
/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    75ae:	ce 01       	movw	r24, r28
    75b0:	88 96       	adiw	r24, 0x28	; 40
    75b2:	9e af       	std	Y+62, r25	; 0x3e
    75b4:	8d af       	std	Y+61, r24	; 0x3d
{
	BYTE c, d, ni, si, i, *sfn;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
    75b6:	af 85       	ldd	r26, Y+15	; 0x0f
    75b8:	b8 89       	ldd	r27, Y+16	; 0x10


/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    75ba:	fd 01       	movw	r30, r26
	while (cnt--) *d++ = (char)val;
    75bc:	cd 01       	movw	r24, r26
    75be:	0b 96       	adiw	r24, 0x0b	; 11
    75c0:	01 c0       	rjmp	.+2      	; 0x75c4 <pf_open+0x90>
    75c2:	41 92       	st	Z+, r4
    75c4:	e8 17       	cp	r30, r24
    75c6:	f9 07       	cpc	r31, r25
    75c8:	e1 f7       	brne	.-8      	; 0x75c2 <pf_open+0x8e>
    75ca:	38 e0       	ldi	r19, 0x08	; 8
    75cc:	55 24       	eor	r5, r5
    75ce:	20 e0       	ldi	r18, 0x00	; 0
    75d0:	02 c0       	rjmp	.+4      	; 0x75d6 <pf_open+0xa2>
    75d2:	3b e0       	ldi	r19, 0x0B	; 11
    75d4:	28 e0       	ldi	r18, 0x08	; 8
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = 0; ni = 8;
	p = *path;
	for (;;) {
		c = p[si++];
    75d6:	f4 01       	movw	r30, r8
    75d8:	e5 0d       	add	r30, r5
    75da:	f1 1d       	adc	r31, r1
    75dc:	90 81       	ld	r25, Z
    75de:	53 94       	inc	r5
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
    75e0:	91 32       	cpi	r25, 0x21	; 33
    75e2:	b0 f0       	brcs	.+44     	; 0x7610 <pf_open+0xdc>
    75e4:	9f 32       	cpi	r25, 0x2F	; 47
    75e6:	a1 f0       	breq	.+40     	; 0x7610 <pf_open+0xdc>
		if (c == '.' || i >= ni) {
    75e8:	9e 32       	cpi	r25, 0x2E	; 46
    75ea:	11 f0       	breq	.+4      	; 0x75f0 <pf_open+0xbc>
    75ec:	23 17       	cp	r18, r19
    75ee:	28 f0       	brcs	.+10     	; 0x75fa <pf_open+0xc6>
			if (ni != 8 || c != '.') break;
    75f0:	38 30       	cpi	r19, 0x08	; 8
    75f2:	71 f4       	brne	.+28     	; 0x7610 <pf_open+0xdc>
    75f4:	9e 32       	cpi	r25, 0x2E	; 46
    75f6:	69 f3       	breq	.-38     	; 0x75d2 <pf_open+0x9e>
    75f8:	0b c0       	rjmp	.+22     	; 0x7610 <pf_open+0xdc>
		if (IsDBCS1(c) && i < ni - 1) {	/* DBC 1st byte? */
			d = p[si++];				/* Get 2nd byte */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
    75fa:	89 2f       	mov	r24, r25
    75fc:	81 56       	subi	r24, 0x61	; 97
    75fe:	8a 31       	cpi	r24, 0x1A	; 26
    7600:	08 f4       	brcc	.+2      	; 0x7604 <pf_open+0xd0>
    7602:	90 52       	subi	r25, 0x20	; 32
			sfn[i++] = c;
    7604:	fd 01       	movw	r30, r26
    7606:	e2 0f       	add	r30, r18
    7608:	f1 1d       	adc	r31, r1
    760a:	90 83       	st	Z, r25
    760c:	2f 5f       	subi	r18, 0xFF	; 255
    760e:	e3 cf       	rjmp	.-58     	; 0x75d6 <pf_open+0xa2>
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
    7610:	1b 96       	adiw	r26, 0x0b	; 11
    7612:	1c 92       	st	X, r1
    7614:	1b 97       	sbiw	r26, 0x0b	; 11
    7616:	91 32       	cpi	r25, 0x21	; 33
    7618:	18 f4       	brcc	.+6      	; 0x7620 <pf_open+0xec>
    761a:	91 e0       	ldi	r25, 0x01	; 1
    761c:	1b 96       	adiw	r26, 0x0b	; 11
    761e:	9c 93       	st	X, r25
{
	FRESULT res;
	BYTE c;


	res = dir_rewind(dj);			/* Rewind directory object */
    7620:	ce 01       	movw	r24, r28
    7622:	0d 96       	adiw	r24, 0x0d	; 13
    7624:	0e 94 c5 38 	call	0x718a	; 0x718a <dir_rewind>
    7628:	9c 01       	movw	r18, r24
	if (res != FR_OK) return res;
    762a:	00 97       	sbiw	r24, 0x00	; 0
    762c:	09 f0       	breq	.+2      	; 0x7630 <pf_open+0xfc>
    762e:	ce c0       	rjmp	.+412    	; 0x77cc <pf_open+0x298>

	do {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
    7630:	49 8d       	ldd	r20, Y+25	; 0x19
    7632:	5a 8d       	ldd	r21, Y+26	; 0x1a
    7634:	6b 8d       	ldd	r22, Y+27	; 0x1b
    7636:	7c 8d       	ldd	r23, Y+28	; 0x1c
    7638:	2d 85       	ldd	r18, Y+13	; 0x0d
    763a:	3e 85       	ldd	r19, Y+14	; 0x0e
    763c:	2f 70       	andi	r18, 0x0F	; 15
    763e:	30 70       	andi	r19, 0x00	; 0
    7640:	f5 e0       	ldi	r31, 0x05	; 5
    7642:	22 0f       	add	r18, r18
    7644:	33 1f       	adc	r19, r19
    7646:	fa 95       	dec	r31
    7648:	e1 f7       	brne	.-8      	; 0x7642 <pf_open+0x10e>
    764a:	c1 01       	movw	r24, r2
    764c:	00 e2       	ldi	r16, 0x20	; 32
    764e:	10 e0       	ldi	r17, 0x00	; 0
    7650:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <disk_readp>
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
    7654:	89 2b       	or	r24, r25
    7656:	09 f0       	breq	.+2      	; 0x765a <pf_open+0x126>
    7658:	1e c1       	rjmp	.+572    	; 0x7896 <pf_open+0x362>
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    765a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    765c:	88 23       	and	r24, r24
    765e:	09 f4       	brne	.+2      	; 0x7662 <pf_open+0x12e>
    7660:	b3 c0       	rjmp	.+358    	; 0x77c8 <pf_open+0x294>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    7662:	48 a5       	ldd	r20, Y+40	; 0x28
    7664:	43 fd       	sbrc	r20, 3
    7666:	11 c0       	rjmp	.+34     	; 0x768a <pf_open+0x156>
    7668:	2f 85       	ldd	r18, Y+15	; 0x0f
    766a:	38 89       	ldd	r19, Y+16	; 0x10
}

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
    766c:	f1 01       	movw	r30, r2
    766e:	d9 01       	movw	r26, r18
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    7670:	8d ad       	ldd	r24, Y+61	; 0x3d
    7672:	9e ad       	ldd	r25, Y+62	; 0x3e
    7674:	e8 17       	cp	r30, r24
    7676:	f9 07       	cpc	r31, r25
    7678:	09 f4       	brne	.+2      	; 0x767c <pf_open+0x148>
    767a:	04 c1       	rjmp	.+520    	; 0x7884 <pf_open+0x350>
    767c:	90 81       	ld	r25, Z
    767e:	8c 91       	ld	r24, X
    7680:	98 17       	cp	r25, r24
    7682:	19 f4       	brne	.+6      	; 0x768a <pf_open+0x156>
    7684:	31 96       	adiw	r30, 0x01	; 1
    7686:	11 96       	adiw	r26, 0x01	; 1
    7688:	f3 cf       	rjmp	.-26     	; 0x7670 <pf_open+0x13c>
	DIR *dj			/* Pointer to directory object */
)
{
	CLUST clst;
	WORD i;
	FATFS *fs = FatFs;
    768a:	00 91 08 01 	lds	r16, 0x0108
    768e:	10 91 09 01 	lds	r17, 0x0109


	i = dj->index + 1;
    7692:	ad 84       	ldd	r10, Y+13	; 0x0d
    7694:	be 84       	ldd	r11, Y+14	; 0x0e
    7696:	08 94       	sec
    7698:	a1 1c       	adc	r10, r1
    769a:	b1 1c       	adc	r11, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    769c:	a1 14       	cp	r10, r1
    769e:	b1 04       	cpc	r11, r1
    76a0:	09 f4       	brne	.+2      	; 0x76a4 <pf_open+0x170>
    76a2:	92 c0       	rjmp	.+292    	; 0x77c8 <pf_open+0x294>
    76a4:	29 8d       	ldd	r18, Y+25	; 0x19
    76a6:	3a 8d       	ldd	r19, Y+26	; 0x1a
    76a8:	4b 8d       	ldd	r20, Y+27	; 0x1b
    76aa:	5c 8d       	ldd	r21, Y+28	; 0x1c
    76ac:	21 15       	cp	r18, r1
    76ae:	31 05       	cpc	r19, r1
    76b0:	41 05       	cpc	r20, r1
    76b2:	51 05       	cpc	r21, r1
    76b4:	09 f4       	brne	.+2      	; 0x76b8 <pf_open+0x184>
    76b6:	88 c0       	rjmp	.+272    	; 0x77c8 <pf_open+0x294>
		return FR_NO_FILE;

	if (!(i % 16)) {		/* Sector changed? */
    76b8:	c5 01       	movw	r24, r10
    76ba:	8f 70       	andi	r24, 0x0F	; 15
    76bc:	90 70       	andi	r25, 0x00	; 0
    76be:	89 2b       	or	r24, r25
    76c0:	09 f0       	breq	.+2      	; 0x76c4 <pf_open+0x190>
    76c2:	7f c0       	rjmp	.+254    	; 0x77c2 <pf_open+0x28e>
		dj->sect++;			/* Next sector */
    76c4:	2f 5f       	subi	r18, 0xFF	; 255
    76c6:	3f 4f       	sbci	r19, 0xFF	; 255
    76c8:	4f 4f       	sbci	r20, 0xFF	; 255
    76ca:	5f 4f       	sbci	r21, 0xFF	; 255
    76cc:	29 8f       	std	Y+25, r18	; 0x19
    76ce:	3a 8f       	std	Y+26, r19	; 0x1a
    76d0:	4b 8f       	std	Y+27, r20	; 0x1b
    76d2:	5c 8f       	std	Y+28, r21	; 0x1c

		if (dj->clust == 0) {	/* Static table */
    76d4:	4d 89       	ldd	r20, Y+21	; 0x15
    76d6:	5e 89       	ldd	r21, Y+22	; 0x16
    76d8:	6f 89       	ldd	r22, Y+23	; 0x17
    76da:	78 8d       	ldd	r23, Y+24	; 0x18
    76dc:	41 15       	cp	r20, r1
    76de:	51 05       	cpc	r21, r1
    76e0:	61 05       	cpc	r22, r1
    76e2:	71 05       	cpc	r23, r1
    76e4:	41 f4       	brne	.+16     	; 0x76f6 <pf_open+0x1c2>
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
    76e6:	f8 01       	movw	r30, r16
    76e8:	84 81       	ldd	r24, Z+4	; 0x04
    76ea:	95 81       	ldd	r25, Z+5	; 0x05
    76ec:	a8 16       	cp	r10, r24
    76ee:	b9 06       	cpc	r11, r25
    76f0:	08 f0       	brcs	.+2      	; 0x76f4 <pf_open+0x1c0>
    76f2:	6a c0       	rjmp	.+212    	; 0x77c8 <pf_open+0x294>
    76f4:	66 c0       	rjmp	.+204    	; 0x77c2 <pf_open+0x28e>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / 16) & (fs->csize-1)) == 0) {	/* Cluster changed? */
    76f6:	f8 01       	movw	r30, r16
    76f8:	82 81       	ldd	r24, Z+2	; 0x02
    76fa:	90 e0       	ldi	r25, 0x00	; 0
    76fc:	01 97       	sbiw	r24, 0x01	; 1
    76fe:	95 01       	movw	r18, r10
    7700:	e4 e0       	ldi	r30, 0x04	; 4
    7702:	36 95       	lsr	r19
    7704:	27 95       	ror	r18
    7706:	ea 95       	dec	r30
    7708:	e1 f7       	brne	.-8      	; 0x7702 <pf_open+0x1ce>
    770a:	82 23       	and	r24, r18
    770c:	93 23       	and	r25, r19
    770e:	89 2b       	or	r24, r25
    7710:	09 f0       	breq	.+2      	; 0x7714 <pf_open+0x1e0>
    7712:	57 c0       	rjmp	.+174    	; 0x77c2 <pf_open+0x28e>
				clst = get_fat(dj->clust);		/* Get next cluster */
    7714:	cb 01       	movw	r24, r22
    7716:	ba 01       	movw	r22, r20
    7718:	0e 94 41 39 	call	0x7282	; 0x7282 <get_fat>
    771c:	9b 01       	movw	r18, r22
    771e:	ac 01       	movw	r20, r24
				if (clst <= 1) return FR_DISK_ERR;
    7720:	62 30       	cpi	r22, 0x02	; 2
    7722:	71 05       	cpc	r23, r1
    7724:	81 05       	cpc	r24, r1
    7726:	91 05       	cpc	r25, r1
    7728:	18 f4       	brcc	.+6      	; 0x7730 <pf_open+0x1fc>
    772a:	21 e0       	ldi	r18, 0x01	; 1
    772c:	30 e0       	ldi	r19, 0x00	; 0
    772e:	4e c0       	rjmp	.+156    	; 0x77cc <pf_open+0x298>
				if (clst >= fs->n_fatent)		/* When it reached end of dynamic table */
    7730:	f8 01       	movw	r30, r16
    7732:	86 81       	ldd	r24, Z+6	; 0x06
    7734:	97 81       	ldd	r25, Z+7	; 0x07
    7736:	a0 85       	ldd	r26, Z+8	; 0x08
    7738:	b1 85       	ldd	r27, Z+9	; 0x09
    773a:	28 17       	cp	r18, r24
    773c:	39 07       	cpc	r19, r25
    773e:	4a 07       	cpc	r20, r26
    7740:	5b 07       	cpc	r21, r27
    7742:	08 f0       	brcs	.+2      	; 0x7746 <pf_open+0x212>
    7744:	41 c0       	rjmp	.+130    	; 0x77c8 <pf_open+0x294>
					return FR_NO_FILE;			/* Report EOT */
				dj->clust = clst;				/* Initialize data for new cluster */
    7746:	2d 8b       	std	Y+21, r18	; 0x15
    7748:	3e 8b       	std	Y+22, r19	; 0x16
    774a:	4f 8b       	std	Y+23, r20	; 0x17
    774c:	58 8f       	std	Y+24, r21	; 0x18
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    774e:	c0 90 08 01 	lds	r12, 0x0108
    7752:	d0 90 09 01 	lds	r13, 0x0109


	clst -= 2;
    7756:	6e ef       	ldi	r22, 0xFE	; 254
    7758:	e6 2e       	mov	r14, r22
    775a:	6f ef       	ldi	r22, 0xFF	; 255
    775c:	f6 2e       	mov	r15, r22
    775e:	6f ef       	ldi	r22, 0xFF	; 255
    7760:	06 2f       	mov	r16, r22
    7762:	6f ef       	ldi	r22, 0xFF	; 255
    7764:	16 2f       	mov	r17, r22
    7766:	e2 0e       	add	r14, r18
    7768:	f3 1e       	adc	r15, r19
    776a:	04 1f       	adc	r16, r20
    776c:	15 1f       	adc	r17, r21
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    776e:	f6 01       	movw	r30, r12
    7770:	86 81       	ldd	r24, Z+6	; 0x06
    7772:	97 81       	ldd	r25, Z+7	; 0x07
    7774:	a0 85       	ldd	r26, Z+8	; 0x08
    7776:	b1 85       	ldd	r27, Z+9	; 0x09
    7778:	02 97       	sbiw	r24, 0x02	; 2
    777a:	a1 09       	sbc	r26, r1
    777c:	b1 09       	sbc	r27, r1
    777e:	e8 16       	cp	r14, r24
    7780:	f9 06       	cpc	r15, r25
    7782:	0a 07       	cpc	r16, r26
    7784:	1b 07       	cpc	r17, r27
    7786:	28 f0       	brcs	.+10     	; 0x7792 <pf_open+0x25e>
    7788:	20 e0       	ldi	r18, 0x00	; 0
    778a:	30 e0       	ldi	r19, 0x00	; 0
    778c:	40 e0       	ldi	r20, 0x00	; 0
    778e:	50 e0       	ldi	r21, 0x00	; 0
    7790:	14 c0       	rjmp	.+40     	; 0x77ba <pf_open+0x286>
	return (DWORD)clst * fs->csize + fs->database;
    7792:	f6 01       	movw	r30, r12
    7794:	22 81       	ldd	r18, Z+2	; 0x02
    7796:	30 e0       	ldi	r19, 0x00	; 0
    7798:	40 e0       	ldi	r20, 0x00	; 0
    779a:	50 e0       	ldi	r21, 0x00	; 0
    779c:	c8 01       	movw	r24, r16
    779e:	b7 01       	movw	r22, r14
    77a0:	0e 94 2b 3f 	call	0x7e56	; 0x7e56 <__mulsi3>
    77a4:	9b 01       	movw	r18, r22
    77a6:	ac 01       	movw	r20, r24
    77a8:	f6 01       	movw	r30, r12
    77aa:	82 89       	ldd	r24, Z+18	; 0x12
    77ac:	93 89       	ldd	r25, Z+19	; 0x13
    77ae:	a4 89       	ldd	r26, Z+20	; 0x14
    77b0:	b5 89       	ldd	r27, Z+21	; 0x15
    77b2:	28 0f       	add	r18, r24
    77b4:	39 1f       	adc	r19, r25
    77b6:	4a 1f       	adc	r20, r26
    77b8:	5b 1f       	adc	r21, r27
				clst = get_fat(dj->clust);		/* Get next cluster */
				if (clst <= 1) return FR_DISK_ERR;
				if (clst >= fs->n_fatent)		/* When it reached end of dynamic table */
					return FR_NO_FILE;			/* Report EOT */
				dj->clust = clst;				/* Initialize data for new cluster */
				dj->sect = clust2sect(clst);
    77ba:	29 8f       	std	Y+25, r18	; 0x19
    77bc:	3a 8f       	std	Y+26, r19	; 0x1a
    77be:	4b 8f       	std	Y+27, r20	; 0x1b
    77c0:	5c 8f       	std	Y+28, r21	; 0x1c
			}
		}
	}

	dj->index = i;
    77c2:	be 86       	std	Y+14, r11	; 0x0e
    77c4:	ad 86       	std	Y+13, r10	; 0x0d
    77c6:	34 cf       	rjmp	.-408    	; 0x7630 <pf_open+0xfc>
    77c8:	23 e0       	ldi	r18, 0x03	; 3
    77ca:	30 e0       	ldi	r19, 0x00	; 0
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj, dir);		/* Find it */
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
    77cc:	23 30       	cpi	r18, 0x03	; 3
    77ce:	31 05       	cpc	r19, r1
    77d0:	09 f0       	breq	.+2      	; 0x77d4 <pf_open+0x2a0>
    77d2:	53 c0       	rjmp	.+166    	; 0x787a <pf_open+0x346>
    77d4:	ef 85       	ldd	r30, Y+15	; 0x0f
    77d6:	f8 89       	ldd	r31, Y+16	; 0x10
    77d8:	83 85       	ldd	r24, Z+11	; 0x0b
    77da:	88 23       	and	r24, r24
    77dc:	09 f4       	brne	.+2      	; 0x77e0 <pf_open+0x2ac>
    77de:	58 c0       	rjmp	.+176    	; 0x7890 <pf_open+0x35c>
    77e0:	4c c0       	rjmp	.+152    	; 0x787a <pf_open+0x346>
					res = FR_NO_PATH;
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
    77e2:	44 ff       	sbrs	r20, 4
    77e4:	55 c0       	rjmp	.+170    	; 0x7890 <pf_open+0x35c>
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
    77e6:	85 0c       	add	r8, r5
    77e8:	91 1c       	adc	r9, r1
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = LD_CLUST(dir);
    77ea:	f1 01       	movw	r30, r2
    77ec:	84 89       	ldd	r24, Z+20	; 0x14
    77ee:	95 89       	ldd	r25, Z+21	; 0x15
    77f0:	a0 e0       	ldi	r26, 0x00	; 0
    77f2:	b0 e0       	ldi	r27, 0x00	; 0
    77f4:	dc 01       	movw	r26, r24
    77f6:	99 27       	eor	r25, r25
    77f8:	88 27       	eor	r24, r24
    77fa:	22 8d       	ldd	r18, Z+26	; 0x1a
    77fc:	33 8d       	ldd	r19, Z+27	; 0x1b
    77fe:	40 e0       	ldi	r20, 0x00	; 0
    7800:	50 e0       	ldi	r21, 0x00	; 0
    7802:	82 2b       	or	r24, r18
    7804:	93 2b       	or	r25, r19
    7806:	a4 2b       	or	r26, r20
    7808:	b5 2b       	or	r27, r21
    780a:	89 8b       	std	Y+17, r24	; 0x11
    780c:	9a 8b       	std	Y+18, r25	; 0x12
    780e:	ab 8b       	std	Y+19, r26	; 0x13
    7810:	bc 8b       	std	Y+20, r27	; 0x14
    7812:	d1 ce       	rjmp	.-606    	; 0x75b6 <pf_open+0x82>

	fs->flag = 0;
	dj.fn = sp;
	res = follow_path(&dj, dir, path);	/* Follow the file path */
	if (res != FR_OK) return res;		/* Follow failed */
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
    7814:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7816:	88 23       	and	r24, r24
    7818:	71 f1       	breq	.+92     	; 0x7876 <pf_open+0x342>
    781a:	88 a5       	ldd	r24, Y+40	; 0x28
    781c:	84 fd       	sbrc	r24, 4
    781e:	2b c0       	rjmp	.+86     	; 0x7876 <pf_open+0x342>
		return FR_NO_FILE;

	fs->org_clust = LD_CLUST(dir);			/* File start cluster */
    7820:	be 01       	movw	r22, r28
    7822:	63 5e       	subi	r22, 0xE3	; 227
    7824:	7f 4f       	sbci	r23, 0xFF	; 255
    7826:	fb 01       	movw	r30, r22
    7828:	84 89       	ldd	r24, Z+20	; 0x14
    782a:	95 89       	ldd	r25, Z+21	; 0x15
    782c:	a0 e0       	ldi	r26, 0x00	; 0
    782e:	b0 e0       	ldi	r27, 0x00	; 0
    7830:	dc 01       	movw	r26, r24
    7832:	99 27       	eor	r25, r25
    7834:	88 27       	eor	r24, r24
    7836:	22 8d       	ldd	r18, Z+26	; 0x1a
    7838:	33 8d       	ldd	r19, Z+27	; 0x1b
    783a:	40 e0       	ldi	r20, 0x00	; 0
    783c:	50 e0       	ldi	r21, 0x00	; 0
    783e:	82 2b       	or	r24, r18
    7840:	93 2b       	or	r25, r19
    7842:	a4 2b       	or	r26, r20
    7844:	b5 2b       	or	r27, r21
    7846:	f3 01       	movw	r30, r6
    7848:	86 8f       	std	Z+30, r24	; 0x1e
    784a:	97 8f       	std	Z+31, r25	; 0x1f
    784c:	a0 a3       	std	Z+32, r26	; 0x20
    784e:	b1 a3       	std	Z+33, r27	; 0x21
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    7850:	fb 01       	movw	r30, r22
    7852:	84 8d       	ldd	r24, Z+28	; 0x1c
    7854:	95 8d       	ldd	r25, Z+29	; 0x1d
    7856:	a6 8d       	ldd	r26, Z+30	; 0x1e
    7858:	b7 8d       	ldd	r27, Z+31	; 0x1f
    785a:	f3 01       	movw	r30, r6
    785c:	82 8f       	std	Z+26, r24	; 0x1a
    785e:	93 8f       	std	Z+27, r25	; 0x1b
    7860:	a4 8f       	std	Z+28, r26	; 0x1c
    7862:	b5 8f       	std	Z+29, r27	; 0x1d
	fs->fptr = 0;						/* File pointer */
    7864:	16 8a       	std	Z+22, r1	; 0x16
    7866:	17 8a       	std	Z+23, r1	; 0x17
    7868:	10 8e       	std	Z+24, r1	; 0x18
    786a:	11 8e       	std	Z+25, r1	; 0x19
	fs->flag = FA_OPENED;
    786c:	81 e0       	ldi	r24, 0x01	; 1
    786e:	81 83       	std	Z+1, r24	; 0x01
    7870:	20 e0       	ldi	r18, 0x00	; 0
    7872:	30 e0       	ldi	r19, 0x00	; 0
    7874:	02 c0       	rjmp	.+4      	; 0x787a <pf_open+0x346>

	return FR_OK;
    7876:	23 e0       	ldi	r18, 0x03	; 3
    7878:	30 e0       	ldi	r19, 0x00	; 0
}
    787a:	c9 01       	movw	r24, r18
    787c:	ee 96       	adiw	r28, 0x3e	; 62
    787e:	e2 e1       	ldi	r30, 0x12	; 18
    7880:	0c 94 88 3f 	jmp	0x7f10	; 0x7f10 <__epilogue_restores__>
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
					res = FR_NO_PATH;
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
    7884:	f9 01       	movw	r30, r18
    7886:	83 85       	ldd	r24, Z+11	; 0x0b
    7888:	88 23       	and	r24, r24
    788a:	09 f4       	brne	.+2      	; 0x788e <pf_open+0x35a>
    788c:	aa cf       	rjmp	.-172    	; 0x77e2 <pf_open+0x2ae>
    788e:	c2 cf       	rjmp	.-124    	; 0x7814 <pf_open+0x2e0>
    7890:	24 e0       	ldi	r18, 0x04	; 4
    7892:	30 e0       	ldi	r19, 0x00	; 0
    7894:	f2 cf       	rjmp	.-28     	; 0x787a <pf_open+0x346>
    7896:	21 e0       	ldi	r18, 0x01	; 1
    7898:	30 e0       	ldi	r19, 0x00	; 0
    789a:	ef cf       	rjmp	.-34     	; 0x787a <pf_open+0x346>

0000789c <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    789c:	a0 e0       	ldi	r26, 0x00	; 0
    789e:	b0 e0       	ldi	r27, 0x00	; 0
    78a0:	e4 e5       	ldi	r30, 0x54	; 84
    78a2:	fc e3       	ldi	r31, 0x3C	; 60
    78a4:	0c 94 74 3f 	jmp	0x7ee8	; 0x7ee8 <__prologue_saves__+0x10>
    78a8:	b8 2e       	mov	r11, r24
    78aa:	a9 2e       	mov	r10, r25
    78ac:	6a 01       	movw	r12, r20
    78ae:	7b 01       	movw	r14, r22
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot sector */
    78b0:	2e ef       	ldi	r18, 0xFE	; 254
    78b2:	31 e0       	ldi	r19, 0x01	; 1
    78b4:	02 e0       	ldi	r16, 0x02	; 2
    78b6:	10 e0       	ldi	r17, 0x00	; 0
    78b8:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <disk_readp>
    78bc:	89 2b       	or	r24, r25
    78be:	11 f0       	breq	.+4      	; 0x78c4 <check_fs+0x28>
    78c0:	23 e0       	ldi	r18, 0x03	; 3
    78c2:	33 c0       	rjmp	.+102    	; 0x792a <check_fs+0x8e>
		return 3;
	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
    78c4:	cb 2d       	mov	r28, r11
    78c6:	da 2d       	mov	r29, r10
    78c8:	88 81       	ld	r24, Y
    78ca:	99 81       	ldd	r25, Y+1	; 0x01
    78cc:	85 55       	subi	r24, 0x55	; 85
    78ce:	9a 4a       	sbci	r25, 0xAA	; 170
    78d0:	11 f0       	breq	.+4      	; 0x78d6 <check_fs+0x3a>
    78d2:	22 e0       	ldi	r18, 0x02	; 2
    78d4:	2a c0       	rjmp	.+84     	; 0x792a <check_fs+0x8e>
		return 2;

	if (!disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
    78d6:	8b 2d       	mov	r24, r11
    78d8:	9a 2d       	mov	r25, r10
    78da:	b7 01       	movw	r22, r14
    78dc:	a6 01       	movw	r20, r12
    78de:	26 e3       	ldi	r18, 0x36	; 54
    78e0:	30 e0       	ldi	r19, 0x00	; 0
    78e2:	02 e0       	ldi	r16, 0x02	; 2
    78e4:	10 e0       	ldi	r17, 0x00	; 0
    78e6:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <disk_readp>
    78ea:	89 2b       	or	r24, r25
    78ec:	39 f4       	brne	.+14     	; 0x78fc <check_fs+0x60>
    78ee:	88 81       	ld	r24, Y
    78f0:	99 81       	ldd	r25, Y+1	; 0x01
    78f2:	86 54       	subi	r24, 0x46	; 70
    78f4:	91 44       	sbci	r25, 0x41	; 65
    78f6:	11 f4       	brne	.+4      	; 0x78fc <check_fs+0x60>
    78f8:	20 e0       	ldi	r18, 0x00	; 0
    78fa:	17 c0       	rjmp	.+46     	; 0x792a <check_fs+0x8e>
		return 0;
	if (_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT32 */
    78fc:	8b 2d       	mov	r24, r11
    78fe:	9a 2d       	mov	r25, r10
    7900:	b7 01       	movw	r22, r14
    7902:	a6 01       	movw	r20, r12
    7904:	22 e5       	ldi	r18, 0x52	; 82
    7906:	30 e0       	ldi	r19, 0x00	; 0
    7908:	02 e0       	ldi	r16, 0x02	; 2
    790a:	10 e0       	ldi	r17, 0x00	; 0
    790c:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <disk_readp>
    7910:	89 2b       	or	r24, r25
    7912:	11 f0       	breq	.+4      	; 0x7918 <check_fs+0x7c>
    7914:	21 e0       	ldi	r18, 0x01	; 1
    7916:	09 c0       	rjmp	.+18     	; 0x792a <check_fs+0x8e>
    7918:	20 e0       	ldi	r18, 0x00	; 0
    791a:	88 81       	ld	r24, Y
    791c:	99 81       	ldd	r25, Y+1	; 0x01
    791e:	86 54       	subi	r24, 0x46	; 70
    7920:	91 44       	sbci	r25, 0x41	; 65
    7922:	09 f4       	brne	.+2      	; 0x7926 <check_fs+0x8a>
    7924:	21 e0       	ldi	r18, 0x01	; 1
    7926:	81 e0       	ldi	r24, 0x01	; 1
    7928:	28 27       	eor	r18, r24
		return 0;
	return 1;
}
    792a:	82 2f       	mov	r24, r18
    792c:	cd b7       	in	r28, 0x3d	; 61
    792e:	de b7       	in	r29, 0x3e	; 62
    7930:	ea e0       	ldi	r30, 0x0A	; 10
    7932:	0c 94 90 3f 	jmp	0x7f20	; 0x7f20 <__epilogue_restores__+0x10>

00007936 <pf_mount>:
/*-----------------------------------------------------------------------*/

FRESULT pf_mount (
	FATFS *fs		/* Pointer to new file system object (NULL: Unmount) */
)
{
    7936:	a4 e2       	ldi	r26, 0x24	; 36
    7938:	b0 e0       	ldi	r27, 0x00	; 0
    793a:	e1 ea       	ldi	r30, 0xA1	; 161
    793c:	fc e3       	ldi	r31, 0x3C	; 60
    793e:	0c 94 70 3f 	jmp	0x7ee0	; 0x7ee0 <__prologue_saves__+0x8>
    7942:	5c 01       	movw	r10, r24
	BYTE fmt, buf[36];
	DWORD bsect, fsize, tsect, mclst;


	FatFs = 0;
    7944:	10 92 09 01 	sts	0x0109, r1
    7948:	10 92 08 01 	sts	0x0108, r1
	if (!fs) return FR_OK;				/* Unregister fs object */
    794c:	00 97       	sbiw	r24, 0x00	; 0
    794e:	09 f4       	brne	.+2      	; 0x7952 <pf_mount+0x1c>
    7950:	ed c0       	rjmp	.+474    	; 0x7b2c <pf_mount+0x1f6>

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
    7952:	0e 94 37 3e 	call	0x7c6e	; 0x7c6e <disk_initialize>
    7956:	80 ff       	sbrs	r24, 0
    7958:	03 c0       	rjmp	.+6      	; 0x7960 <pf_mount+0x2a>
    795a:	22 e0       	ldi	r18, 0x02	; 2
    795c:	30 e0       	ldi	r19, 0x00	; 0
    795e:	ee c0       	rjmp	.+476    	; 0x7b3c <pf_mount+0x206>
		return FR_NOT_READY;

	/* Search FAT partition on the drive */
	bsect = 0;
	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
    7960:	4e 01       	movw	r8, r28
    7962:	08 94       	sec
    7964:	81 1c       	adc	r8, r1
    7966:	91 1c       	adc	r9, r1
    7968:	c4 01       	movw	r24, r8
    796a:	40 e0       	ldi	r20, 0x00	; 0
    796c:	50 e0       	ldi	r21, 0x00	; 0
    796e:	60 e0       	ldi	r22, 0x00	; 0
    7970:	70 e0       	ldi	r23, 0x00	; 0
    7972:	0e 94 4e 3c 	call	0x789c	; 0x789c <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
    7976:	81 30       	cpi	r24, 0x01	; 1
    7978:	21 f0       	breq	.+8      	; 0x7982 <pf_mount+0x4c>
    797a:	cc 24       	eor	r12, r12
    797c:	dd 24       	eor	r13, r13
    797e:	76 01       	movw	r14, r12
    7980:	1b c0       	rjmp	.+54     	; 0x79b8 <pf_mount+0x82>
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
    7982:	c4 01       	movw	r24, r8
    7984:	40 e0       	ldi	r20, 0x00	; 0
    7986:	50 e0       	ldi	r21, 0x00	; 0
    7988:	60 e0       	ldi	r22, 0x00	; 0
    798a:	70 e0       	ldi	r23, 0x00	; 0
    798c:	2e eb       	ldi	r18, 0xBE	; 190
    798e:	31 e0       	ldi	r19, 0x01	; 1
    7990:	00 e1       	ldi	r16, 0x10	; 16
    7992:	10 e0       	ldi	r17, 0x00	; 0
    7994:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <disk_readp>
    7998:	89 2b       	or	r24, r25
    799a:	09 f0       	breq	.+2      	; 0x799e <pf_mount+0x68>
    799c:	ca c0       	rjmp	.+404    	; 0x7b32 <pf_mount+0x1fc>
			fmt = 3;
		} else {
			if (buf[4]) {					/* Is the partition existing? */
    799e:	8d 81       	ldd	r24, Y+5	; 0x05
    79a0:	88 23       	and	r24, r24
    79a2:	09 f4       	brne	.+2      	; 0x79a6 <pf_mount+0x70>
    79a4:	c9 c0       	rjmp	.+402    	; 0x7b38 <pf_mount+0x202>
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
    79a6:	c9 84       	ldd	r12, Y+9	; 0x09
    79a8:	da 84       	ldd	r13, Y+10	; 0x0a
    79aa:	eb 84       	ldd	r14, Y+11	; 0x0b
    79ac:	fc 84       	ldd	r15, Y+12	; 0x0c
				fmt = check_fs(buf, bsect);	/* Check the partition */
    79ae:	c4 01       	movw	r24, r8
    79b0:	b7 01       	movw	r22, r14
    79b2:	a6 01       	movw	r20, r12
    79b4:	0e 94 4e 3c 	call	0x789c	; 0x789c <check_fs>
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    79b8:	83 30       	cpi	r24, 0x03	; 3
    79ba:	09 f4       	brne	.+2      	; 0x79be <pf_mount+0x88>
    79bc:	ba c0       	rjmp	.+372    	; 0x7b32 <pf_mount+0x1fc>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
    79be:	88 23       	and	r24, r24
    79c0:	09 f0       	breq	.+2      	; 0x79c4 <pf_mount+0x8e>
    79c2:	ba c0       	rjmp	.+372    	; 0x7b38 <pf_mount+0x202>

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof(buf))) return FR_DISK_ERR;
    79c4:	ce 01       	movw	r24, r28
    79c6:	01 96       	adiw	r24, 0x01	; 1
    79c8:	b7 01       	movw	r22, r14
    79ca:	a6 01       	movw	r20, r12
    79cc:	2d e0       	ldi	r18, 0x0D	; 13
    79ce:	30 e0       	ldi	r19, 0x00	; 0
    79d0:	04 e2       	ldi	r16, 0x24	; 36
    79d2:	10 e0       	ldi	r17, 0x00	; 0
    79d4:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <disk_readp>
    79d8:	89 2b       	or	r24, r25
    79da:	09 f0       	breq	.+2      	; 0x79de <pf_mount+0xa8>
    79dc:	aa c0       	rjmp	.+340    	; 0x7b32 <pf_mount+0x1fc>

	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
    79de:	8a 85       	ldd	r24, Y+10	; 0x0a
    79e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    79e2:	bc 01       	movw	r22, r24
    79e4:	80 e0       	ldi	r24, 0x00	; 0
    79e6:	90 e0       	ldi	r25, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);
    79e8:	61 15       	cp	r22, r1
    79ea:	71 05       	cpc	r23, r1
    79ec:	81 05       	cpc	r24, r1
    79ee:	91 05       	cpc	r25, r1
    79f0:	21 f4       	brne	.+8      	; 0x79fa <pf_mount+0xc4>
    79f2:	68 8d       	ldd	r22, Y+24	; 0x18
    79f4:	79 8d       	ldd	r23, Y+25	; 0x19
    79f6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    79f8:	9b 8d       	ldd	r25, Y+27	; 0x1b

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
    79fa:	2c 81       	ldd	r18, Y+4	; 0x04
    79fc:	30 e0       	ldi	r19, 0x00	; 0
    79fe:	40 e0       	ldi	r20, 0x00	; 0
    7a00:	50 e0       	ldi	r21, 0x00	; 0
    7a02:	0e 94 2b 3f 	call	0x7e56	; 0x7e56 <__mulsi3>
    7a06:	3b 01       	movw	r6, r22
    7a08:	4c 01       	movw	r8, r24
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
    7a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    7a0c:	9b 81       	ldd	r25, Y+3	; 0x03
    7a0e:	a0 e0       	ldi	r26, 0x00	; 0
    7a10:	b0 e0       	ldi	r27, 0x00	; 0
    7a12:	c8 0e       	add	r12, r24
    7a14:	d9 1e       	adc	r13, r25
    7a16:	ea 1e       	adc	r14, r26
    7a18:	fb 1e       	adc	r15, r27
    7a1a:	f5 01       	movw	r30, r10
    7a1c:	c2 86       	std	Z+10, r12	; 0x0a
    7a1e:	d3 86       	std	Z+11, r13	; 0x0b
    7a20:	e4 86       	std	Z+12, r14	; 0x0c
    7a22:	f5 86       	std	Z+13, r15	; 0x0d
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
    7a24:	89 81       	ldd	r24, Y+1	; 0x01
    7a26:	82 83       	std	Z+2, r24	; 0x02
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
    7a28:	2d 81       	ldd	r18, Y+5	; 0x05
    7a2a:	3e 81       	ldd	r19, Y+6	; 0x06
    7a2c:	35 83       	std	Z+5, r19	; 0x05
    7a2e:	24 83       	std	Z+4, r18	; 0x04
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
    7a30:	8f 81       	ldd	r24, Y+7	; 0x07
    7a32:	98 85       	ldd	r25, Y+8	; 0x08
    7a34:	7c 01       	movw	r14, r24
    7a36:	00 e0       	ldi	r16, 0x00	; 0
    7a38:	10 e0       	ldi	r17, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
    7a3a:	e1 14       	cp	r14, r1
    7a3c:	f1 04       	cpc	r15, r1
    7a3e:	01 05       	cpc	r16, r1
    7a40:	11 05       	cpc	r17, r1
    7a42:	21 f4       	brne	.+8      	; 0x7a4c <pf_mount+0x116>
    7a44:	ec 88       	ldd	r14, Y+20	; 0x14
    7a46:	fd 88       	ldd	r15, Y+21	; 0x15
    7a48:	0e 89       	ldd	r16, Y+22	; 0x16
    7a4a:	1f 89       	ldd	r17, Y+23	; 0x17
	mclst = (tsect						/* Last cluster# + 1 */
    7a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    7a4e:	9b 81       	ldd	r25, Y+3	; 0x03
    7a50:	a0 e0       	ldi	r26, 0x00	; 0
    7a52:	b0 e0       	ldi	r27, 0x00	; 0
    7a54:	e8 1a       	sub	r14, r24
    7a56:	f9 0a       	sbc	r15, r25
    7a58:	0a 0b       	sbc	r16, r26
    7a5a:	1b 0b       	sbc	r17, r27
    7a5c:	e6 18       	sub	r14, r6
    7a5e:	f7 08       	sbc	r15, r7
    7a60:	08 09       	sbc	r16, r8
    7a62:	19 09       	sbc	r17, r9
    7a64:	44 e0       	ldi	r20, 0x04	; 4
    7a66:	36 95       	lsr	r19
    7a68:	27 95       	ror	r18
    7a6a:	4a 95       	dec	r20
    7a6c:	e1 f7       	brne	.-8      	; 0x7a66 <pf_mount+0x130>
    7a6e:	c9 01       	movw	r24, r18
    7a70:	a0 e0       	ldi	r26, 0x00	; 0
    7a72:	b0 e0       	ldi	r27, 0x00	; 0
    7a74:	e8 1a       	sub	r14, r24
    7a76:	f9 0a       	sbc	r15, r25
    7a78:	0a 0b       	sbc	r16, r26
    7a7a:	1b 0b       	sbc	r17, r27
    7a7c:	f5 01       	movw	r30, r10
    7a7e:	22 81       	ldd	r18, Z+2	; 0x02
    7a80:	30 e0       	ldi	r19, 0x00	; 0
    7a82:	40 e0       	ldi	r20, 0x00	; 0
    7a84:	50 e0       	ldi	r21, 0x00	; 0
    7a86:	c8 01       	movw	r24, r16
    7a88:	b7 01       	movw	r22, r14
    7a8a:	0e 94 4a 3f 	call	0x7e94	; 0x7e94 <__udivmodsi4>
    7a8e:	2e 5f       	subi	r18, 0xFE	; 254
    7a90:	3f 4f       	sbci	r19, 0xFF	; 255
    7a92:	4f 4f       	sbci	r20, 0xFF	; 255
    7a94:	5f 4f       	sbci	r21, 0xFF	; 255
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
		) / fs->csize + 2;
	fs->n_fatent = (CLUST)mclst;
    7a96:	f5 01       	movw	r30, r10
    7a98:	26 83       	std	Z+6, r18	; 0x06
    7a9a:	37 83       	std	Z+7, r19	; 0x07
    7a9c:	40 87       	std	Z+8, r20	; 0x08
    7a9e:	51 87       	std	Z+9, r21	; 0x09

	fmt = FS_FAT16;							/* Determine the FAT sub type */
	if (mclst < 0xFF7) 						/* Number of clusters < 0xFF5 */
    7aa0:	27 3f       	cpi	r18, 0xF7	; 247
    7aa2:	ff e0       	ldi	r31, 0x0F	; 15
    7aa4:	3f 07       	cpc	r19, r31
    7aa6:	f0 e0       	ldi	r31, 0x00	; 0
    7aa8:	4f 07       	cpc	r20, r31
    7aaa:	f0 e0       	ldi	r31, 0x00	; 0
    7aac:	5f 07       	cpc	r21, r31
    7aae:	08 f4       	brcc	.+2      	; 0x7ab2 <pf_mount+0x17c>
    7ab0:	43 c0       	rjmp	.+134    	; 0x7b38 <pf_mount+0x202>
#if _FS_FAT12
		fmt = FS_FAT12;
#else
		return FR_NO_FILESYSTEM;
#endif
	if (mclst >= 0xFFF7)					/* Number of clusters >= 0xFFF5 */
    7ab2:	27 5f       	subi	r18, 0xF7	; 247
    7ab4:	3f 4f       	sbci	r19, 0xFF	; 255
    7ab6:	40 40       	sbci	r20, 0x00	; 0
    7ab8:	50 40       	sbci	r21, 0x00	; 0
    7aba:	10 f0       	brcs	.+4      	; 0x7ac0 <pf_mount+0x18a>
    7abc:	83 e0       	ldi	r24, 0x03	; 3
    7abe:	01 c0       	rjmp	.+2      	; 0x7ac2 <pf_mount+0x18c>
    7ac0:	82 e0       	ldi	r24, 0x02	; 2
		fmt = FS_FAT32;
#else
		return FR_NO_FILESYSTEM;
#endif

	fs->fs_type = fmt;		/* FAT sub-type */
    7ac2:	f5 01       	movw	r30, r10
    7ac4:	80 83       	st	Z, r24
	if (_FS_FAT32 && fmt == FS_FAT32)
    7ac6:	83 30       	cpi	r24, 0x03	; 3
    7ac8:	29 f4       	brne	.+10     	; 0x7ad4 <pf_mount+0x19e>
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
    7aca:	88 a1       	ldd	r24, Y+32	; 0x20
    7acc:	99 a1       	ldd	r25, Y+33	; 0x21
    7ace:	aa a1       	ldd	r26, Y+34	; 0x22
    7ad0:	bb a1       	ldd	r27, Y+35	; 0x23
    7ad2:	09 c0       	rjmp	.+18     	; 0x7ae6 <pf_mount+0x1b0>
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    7ad4:	f5 01       	movw	r30, r10
    7ad6:	82 85       	ldd	r24, Z+10	; 0x0a
    7ad8:	93 85       	ldd	r25, Z+11	; 0x0b
    7ada:	a4 85       	ldd	r26, Z+12	; 0x0c
    7adc:	b5 85       	ldd	r27, Z+13	; 0x0d
    7ade:	86 0d       	add	r24, r6
    7ae0:	97 1d       	adc	r25, r7
    7ae2:	a8 1d       	adc	r26, r8
    7ae4:	b9 1d       	adc	r27, r9
    7ae6:	86 87       	std	Z+14, r24	; 0x0e
    7ae8:	97 87       	std	Z+15, r25	; 0x0f
    7aea:	a0 8b       	std	Z+16, r26	; 0x10
    7aec:	b1 8b       	std	Z+17, r27	; 0x11
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
    7aee:	f5 01       	movw	r30, r10
    7af0:	84 81       	ldd	r24, Z+4	; 0x04
    7af2:	95 81       	ldd	r25, Z+5	; 0x05
    7af4:	24 e0       	ldi	r18, 0x04	; 4
    7af6:	96 95       	lsr	r25
    7af8:	87 95       	ror	r24
    7afa:	2a 95       	dec	r18
    7afc:	e1 f7       	brne	.-8      	; 0x7af6 <pf_mount+0x1c0>
    7afe:	a0 e0       	ldi	r26, 0x00	; 0
    7b00:	b0 e0       	ldi	r27, 0x00	; 0
    7b02:	22 85       	ldd	r18, Z+10	; 0x0a
    7b04:	33 85       	ldd	r19, Z+11	; 0x0b
    7b06:	44 85       	ldd	r20, Z+12	; 0x0c
    7b08:	55 85       	ldd	r21, Z+13	; 0x0d
    7b0a:	82 0f       	add	r24, r18
    7b0c:	93 1f       	adc	r25, r19
    7b0e:	a4 1f       	adc	r26, r20
    7b10:	b5 1f       	adc	r27, r21
    7b12:	86 0d       	add	r24, r6
    7b14:	97 1d       	adc	r25, r7
    7b16:	a8 1d       	adc	r26, r8
    7b18:	b9 1d       	adc	r27, r9
    7b1a:	82 8b       	std	Z+18, r24	; 0x12
    7b1c:	93 8b       	std	Z+19, r25	; 0x13
    7b1e:	a4 8b       	std	Z+20, r26	; 0x14
    7b20:	b5 8b       	std	Z+21, r27	; 0x15

	fs->flag = 0;
    7b22:	11 82       	std	Z+1, r1	; 0x01
	FatFs = fs;
    7b24:	b0 92 09 01 	sts	0x0109, r11
    7b28:	a0 92 08 01 	sts	0x0108, r10
    7b2c:	20 e0       	ldi	r18, 0x00	; 0
    7b2e:	30 e0       	ldi	r19, 0x00	; 0
    7b30:	05 c0       	rjmp	.+10     	; 0x7b3c <pf_mount+0x206>

	return FR_OK;
    7b32:	21 e0       	ldi	r18, 0x01	; 1
    7b34:	30 e0       	ldi	r19, 0x00	; 0
    7b36:	02 c0       	rjmp	.+4      	; 0x7b3c <pf_mount+0x206>
    7b38:	27 e0       	ldi	r18, 0x07	; 7
    7b3a:	30 e0       	ldi	r19, 0x00	; 0
}
    7b3c:	c9 01       	movw	r24, r18
    7b3e:	a4 96       	adiw	r28, 0x24	; 36
    7b40:	ee e0       	ldi	r30, 0x0E	; 14
    7b42:	0c 94 8c 3f 	jmp	0x7f18	; 0x7f18 <__epilogue_restores__+0x8>

00007b46 <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* 1st byte (Start + Index) */
	DWORD arg		/* Argument (32 bits) */
)
{
    7b46:	df 92       	push	r13
    7b48:	ef 92       	push	r14
    7b4a:	ff 92       	push	r15
    7b4c:	0f 93       	push	r16
    7b4e:	1f 93       	push	r17
    7b50:	d8 2e       	mov	r13, r24
    7b52:	7a 01       	movw	r14, r20
    7b54:	8b 01       	movw	r16, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    7b56:	87 ff       	sbrs	r24, 7
    7b58:	0b c0       	rjmp	.+22     	; 0x7b70 <send_cmd+0x2a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    7b5a:	87 e7       	ldi	r24, 0x77	; 119
    7b5c:	40 e0       	ldi	r20, 0x00	; 0
    7b5e:	50 e0       	ldi	r21, 0x00	; 0
    7b60:	60 e0       	ldi	r22, 0x00	; 0
    7b62:	70 e0       	ldi	r23, 0x00	; 0
    7b64:	0e 94 a3 3d 	call	0x7b46	; 0x7b46 <send_cmd>
		if (res > 1) return res;
    7b68:	82 30       	cpi	r24, 0x02	; 2
    7b6a:	78 f5       	brcc	.+94     	; 0x7bca <send_cmd+0x84>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    7b6c:	8f e7       	ldi	r24, 0x7F	; 127
    7b6e:	d8 22       	and	r13, r24
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card */
	select();
    7b70:	0e 94 ed 3e 	call	0x7dda	; 0x7dda <select>

	/* Send a command packet */
	xmit_spi(cmd);						/* Start + Command index */
    7b74:	8d 2d       	mov	r24, r13
    7b76:	0e 94 f2 3e 	call	0x7de4	; 0x7de4 <xmit_spi>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    7b7a:	81 2f       	mov	r24, r17
    7b7c:	99 27       	eor	r25, r25
    7b7e:	aa 27       	eor	r26, r26
    7b80:	bb 27       	eor	r27, r27
    7b82:	0e 94 f2 3e 	call	0x7de4	; 0x7de4 <xmit_spi>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    7b86:	c8 01       	movw	r24, r16
    7b88:	aa 27       	eor	r26, r26
    7b8a:	bb 27       	eor	r27, r27
    7b8c:	0e 94 f2 3e 	call	0x7de4	; 0x7de4 <xmit_spi>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    7b90:	bb 27       	eor	r27, r27
    7b92:	a1 2f       	mov	r26, r17
    7b94:	90 2f       	mov	r25, r16
    7b96:	8f 2d       	mov	r24, r15
    7b98:	0e 94 f2 3e 	call	0x7de4	; 0x7de4 <xmit_spi>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
    7b9c:	8e 2d       	mov	r24, r14
    7b9e:	0e 94 f2 3e 	call	0x7de4	; 0x7de4 <xmit_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
    7ba2:	80 e4       	ldi	r24, 0x40	; 64
    7ba4:	d8 16       	cp	r13, r24
    7ba6:	11 f4       	brne	.+4      	; 0x7bac <send_cmd+0x66>
    7ba8:	85 e9       	ldi	r24, 0x95	; 149
    7baa:	06 c0       	rjmp	.+12     	; 0x7bb8 <send_cmd+0x72>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
    7bac:	88 e4       	ldi	r24, 0x48	; 72
    7bae:	d8 16       	cp	r13, r24
    7bb0:	11 f4       	brne	.+4      	; 0x7bb6 <send_cmd+0x70>
    7bb2:	87 e8       	ldi	r24, 0x87	; 135
    7bb4:	01 c0       	rjmp	.+2      	; 0x7bb8 <send_cmd+0x72>
    7bb6:	81 e0       	ldi	r24, 0x01	; 1
	xmit_spi(n);
    7bb8:	0e 94 f2 3e 	call	0x7de4	; 0x7de4 <xmit_spi>
    7bbc:	1a e0       	ldi	r17, 0x0A	; 10

	/* Receive a command response */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do {
		res = rcv_spi();
    7bbe:	0e 94 f1 3e 	call	0x7de2	; 0x7de2 <rcv_spi>
	} while ((res & 0x80) && --n);
    7bc2:	87 ff       	sbrs	r24, 7
    7bc4:	02 c0       	rjmp	.+4      	; 0x7bca <send_cmd+0x84>
    7bc6:	11 50       	subi	r17, 0x01	; 1
    7bc8:	d1 f7       	brne	.-12     	; 0x7bbe <send_cmd+0x78>

	return res;			/* Return with the response value */
}
    7bca:	1f 91       	pop	r17
    7bcc:	0f 91       	pop	r16
    7bce:	ff 90       	pop	r15
    7bd0:	ef 90       	pop	r14
    7bd2:	df 90       	pop	r13
    7bd4:	08 95       	ret

00007bd6 <disk_readp>:
	BYTE *buff,		/* Pointer to the read buffer (NULL:Read bytes are forwarded to the stream) */
	DWORD lba,		/* Sector number (LBA) */
	WORD ofs,		/* Byte offset to read from (0..511) */
	WORD cnt		/* Number of bytes to read (ofs + cnt mus be <= 512) */
)
{
    7bd6:	a0 e0       	ldi	r26, 0x00	; 0
    7bd8:	b0 e0       	ldi	r27, 0x00	; 0
    7bda:	e1 ef       	ldi	r30, 0xF1	; 241
    7bdc:	fd e3       	ldi	r31, 0x3D	; 61
    7bde:	0c 94 76 3f 	jmp	0x7eec	; 0x7eec <__prologue_saves__+0x14>
    7be2:	6c 01       	movw	r12, r24
    7be4:	79 01       	movw	r14, r18
	DRESULT res;
	BYTE rc;
	WORD bc;


	if (!(CardType & CT_BLOCK)) lba *= 512;		/* Convert to byte address if needed */
    7be6:	80 91 0a 01 	lds	r24, 0x010A
    7bea:	83 fd       	sbrc	r24, 3
    7bec:	07 c0       	rjmp	.+14     	; 0x7bfc <disk_readp+0x26>
    7bee:	39 e0       	ldi	r19, 0x09	; 9
    7bf0:	44 0f       	add	r20, r20
    7bf2:	55 1f       	adc	r21, r21
    7bf4:	66 1f       	adc	r22, r22
    7bf6:	77 1f       	adc	r23, r23
    7bf8:	3a 95       	dec	r19
    7bfa:	d1 f7       	brne	.-12     	; 0x7bf0 <disk_readp+0x1a>

	res = RES_ERROR;
	if (send_cmd(CMD17, lba) == 0) {		/* READ_SINGLE_BLOCK */
    7bfc:	81 e5       	ldi	r24, 0x51	; 81
    7bfe:	0e 94 a3 3d 	call	0x7b46	; 0x7b46 <send_cmd>
    7c02:	88 23       	and	r24, r24
    7c04:	51 f5       	brne	.+84     	; 0x7c5a <disk_readp+0x84>
    7c06:	c0 e4       	ldi	r28, 0x40	; 64
    7c08:	dc e9       	ldi	r29, 0x9C	; 156

		bc = 40000;
		do {							/* Wait for data packet */
			rc = rcv_spi();
    7c0a:	0e 94 f1 3e 	call	0x7de2	; 0x7de2 <rcv_spi>
		} while (rc == 0xFF && --bc);
    7c0e:	8f 3f       	cpi	r24, 0xFF	; 255
    7c10:	19 f4       	brne	.+6      	; 0x7c18 <disk_readp+0x42>
    7c12:	21 97       	sbiw	r28, 0x01	; 1
    7c14:	d1 f7       	brne	.-12     	; 0x7c0a <disk_readp+0x34>
    7c16:	21 c0       	rjmp	.+66     	; 0x7c5a <disk_readp+0x84>

		if (rc == 0xFE) {				/* A data packet arrived */
    7c18:	8e 3f       	cpi	r24, 0xFE	; 254
    7c1a:	f9 f4       	brne	.+62     	; 0x7c5a <disk_readp+0x84>
			bc = 514 - ofs - cnt;

			/* Skip leading bytes */
			if (ofs) {
    7c1c:	e1 14       	cp	r14, r1
    7c1e:	f1 04       	cpc	r15, r1
    7c20:	29 f0       	breq	.+10     	; 0x7c2c <disk_readp+0x56>
    7c22:	e7 01       	movw	r28, r14
				do rcv_spi(); while (--ofs);
    7c24:	0e 94 f1 3e 	call	0x7de2	; 0x7de2 <rcv_spi>
    7c28:	21 97       	sbiw	r28, 0x01	; 1
    7c2a:	e1 f7       	brne	.-8      	; 0x7c24 <disk_readp+0x4e>
    7c2c:	e8 01       	movw	r28, r16
			}

			/* Receive a part of the sector */
			do {
				*buff++ = rcv_spi();
    7c2e:	0e 94 f1 3e 	call	0x7de2	; 0x7de2 <rcv_spi>
    7c32:	f6 01       	movw	r30, r12
    7c34:	81 93       	st	Z+, r24
    7c36:	6f 01       	movw	r12, r30
			} while (--cnt);
    7c38:	21 97       	sbiw	r28, 0x01	; 1
    7c3a:	c9 f7       	brne	.-14     	; 0x7c2e <disk_readp+0x58>
		do {							/* Wait for data packet */
			rc = rcv_spi();
		} while (rc == 0xFF && --bc);

		if (rc == 0xFE) {				/* A data packet arrived */
			bc = 514 - ofs - cnt;
    7c3c:	cc 27       	eor	r28, r28
    7c3e:	dd 27       	eor	r29, r29
    7c40:	ce 19       	sub	r28, r14
    7c42:	df 09       	sbc	r29, r15
    7c44:	ce 5f       	subi	r28, 0xFE	; 254
    7c46:	dd 4f       	sbci	r29, 0xFD	; 253
    7c48:	c0 1b       	sub	r28, r16
    7c4a:	d1 0b       	sbc	r29, r17
			do {
				*buff++ = rcv_spi();
			} while (--cnt);

			/* Skip trailing bytes and CRC */
			do rcv_spi(); while (--bc);
    7c4c:	0e 94 f1 3e 	call	0x7de2	; 0x7de2 <rcv_spi>
    7c50:	21 97       	sbiw	r28, 0x01	; 1
    7c52:	e1 f7       	brne	.-8      	; 0x7c4c <disk_readp+0x76>
    7c54:	c0 e0       	ldi	r28, 0x00	; 0
    7c56:	d0 e0       	ldi	r29, 0x00	; 0
    7c58:	02 c0       	rjmp	.+4      	; 0x7c5e <disk_readp+0x88>
    7c5a:	c1 e0       	ldi	r28, 0x01	; 1
    7c5c:	d0 e0       	ldi	r29, 0x00	; 0

			res = RES_OK;
		}
	}

	deselect();
    7c5e:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <deselect>

	return res;
}
    7c62:	ce 01       	movw	r24, r28
    7c64:	cd b7       	in	r28, 0x3d	; 61
    7c66:	de b7       	in	r29, 0x3e	; 62
    7c68:	e8 e0       	ldi	r30, 0x08	; 8
    7c6a:	0c 94 92 3f 	jmp	0x7f24	; 0x7f24 <__epilogue_restores__+0x14>

00007c6e <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (void)
{
    7c6e:	a4 e0       	ldi	r26, 0x04	; 4
    7c70:	b0 e0       	ldi	r27, 0x00	; 0
    7c72:	ed e3       	ldi	r30, 0x3D	; 61
    7c74:	fe e3       	ldi	r31, 0x3E	; 62
    7c76:	0c 94 76 3f 	jmp	0x7eec	; 0x7eec <__prologue_saves__+0x14>
	BYTE n, cmd, ty, ocr[4];
	UINT tmr;

	
    SPI_PORT |= 1<<SPI_SS;   //PB2 output: High (deselect other SPI chips)
    7c7a:	2a 9a       	sbi	0x05, 2	; 5
    SPI_DDR  |= 1<<SPI_SS; // SPI Data -> Output
    7c7c:	22 9a       	sbi	0x04, 2	; 4


	init_spi();							/* Initialize ports to control MMC */
    7c7e:	0e 94 e0 3e 	call	0x7dc0	; 0x7dc0 <init_spi>
    7c82:	14 e6       	ldi	r17, 0x64	; 100
	for (n = 100; n; n--) dly_100us();	/* 10ms delay */
    7c84:	0e 94 e5 3e 	call	0x7dca	; 0x7dca <dly_100us>
    7c88:	11 50       	subi	r17, 0x01	; 1
    7c8a:	e1 f7       	brne	.-8      	; 0x7c84 <disk_initialize+0x16>
    7c8c:	1a e0       	ldi	r17, 0x0A	; 10
	for (n = 10; n; n--) deselect();	/* 80 Dummy clocks with CS=H */
    7c8e:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <deselect>
    7c92:	11 50       	subi	r17, 0x01	; 1
    7c94:	e1 f7       	brne	.-8      	; 0x7c8e <disk_initialize+0x20>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    7c96:	80 e4       	ldi	r24, 0x40	; 64
    7c98:	40 e0       	ldi	r20, 0x00	; 0
    7c9a:	50 e0       	ldi	r21, 0x00	; 0
    7c9c:	60 e0       	ldi	r22, 0x00	; 0
    7c9e:	70 e0       	ldi	r23, 0x00	; 0
    7ca0:	0e 94 a3 3d 	call	0x7b46	; 0x7b46 <send_cmd>
    7ca4:	81 30       	cpi	r24, 0x01	; 1
    7ca6:	09 f0       	breq	.+2      	; 0x7caa <disk_initialize+0x3c>
    7ca8:	69 c0       	rjmp	.+210    	; 0x7d7c <disk_initialize+0x10e>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
    7caa:	88 e4       	ldi	r24, 0x48	; 72
    7cac:	4a ea       	ldi	r20, 0xAA	; 170
    7cae:	51 e0       	ldi	r21, 0x01	; 1
    7cb0:	60 e0       	ldi	r22, 0x00	; 0
    7cb2:	70 e0       	ldi	r23, 0x00	; 0
    7cb4:	0e 94 a3 3d 	call	0x7b46	; 0x7b46 <send_cmd>
    7cb8:	81 30       	cpi	r24, 0x01	; 1
    7cba:	e1 f5       	brne	.+120    	; 0x7d34 <disk_initialize+0xc6>
    7cbc:	6e 01       	movw	r12, r28
    7cbe:	08 94       	sec
    7cc0:	c1 1c       	adc	r12, r1
    7cc2:	d1 1c       	adc	r13, r1
    7cc4:	76 01       	movw	r14, r12
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
    7cc6:	8e 01       	movw	r16, r28
    7cc8:	0b 5f       	subi	r16, 0xFB	; 251
    7cca:	1f 4f       	sbci	r17, 0xFF	; 255
    7ccc:	0e 94 f1 3e 	call	0x7de2	; 0x7de2 <rcv_spi>
    7cd0:	f7 01       	movw	r30, r14
    7cd2:	81 93       	st	Z+, r24
    7cd4:	7f 01       	movw	r14, r30
    7cd6:	e0 17       	cp	r30, r16
    7cd8:	f1 07       	cpc	r31, r17
    7cda:	c1 f7       	brne	.-16     	; 0x7ccc <disk_initialize+0x5e>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {			/* The card can work at vdd range of 2.7-3.6V */
    7cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    7cde:	81 30       	cpi	r24, 0x01	; 1
    7ce0:	09 f0       	breq	.+2      	; 0x7ce4 <disk_initialize+0x76>
    7ce2:	4c c0       	rjmp	.+152    	; 0x7d7c <disk_initialize+0x10e>
    7ce4:	8c 81       	ldd	r24, Y+4	; 0x04
    7ce6:	8a 3a       	cpi	r24, 0xAA	; 170
    7ce8:	09 f0       	breq	.+2      	; 0x7cec <disk_initialize+0x7e>
    7cea:	48 c0       	rjmp	.+144    	; 0x7d7c <disk_initialize+0x10e>
    7cec:	00 e1       	ldi	r16, 0x10	; 16
    7cee:	17 e2       	ldi	r17, 0x27	; 39
    7cf0:	06 c0       	rjmp	.+12     	; 0x7cfe <disk_initialize+0x90>
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) dly_100us();	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    7cf2:	0e 94 e5 3e 	call	0x7dca	; 0x7dca <dly_100us>
    7cf6:	01 50       	subi	r16, 0x01	; 1
    7cf8:	10 40       	sbci	r17, 0x00	; 0
    7cfa:	09 f4       	brne	.+2      	; 0x7cfe <disk_initialize+0x90>
    7cfc:	3f c0       	rjmp	.+126    	; 0x7d7c <disk_initialize+0x10e>
    7cfe:	89 ee       	ldi	r24, 0xE9	; 233
    7d00:	40 e0       	ldi	r20, 0x00	; 0
    7d02:	50 e0       	ldi	r21, 0x00	; 0
    7d04:	60 e0       	ldi	r22, 0x00	; 0
    7d06:	70 e4       	ldi	r23, 0x40	; 64
    7d08:	0e 94 a3 3d 	call	0x7b46	; 0x7b46 <send_cmd>
    7d0c:	88 23       	and	r24, r24
    7d0e:	89 f7       	brne	.-30     	; 0x7cf2 <disk_initialize+0x84>
    7d10:	42 c0       	rjmp	.+132    	; 0x7d96 <disk_initialize+0x128>
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
    7d12:	0e 94 f1 3e 	call	0x7de2	; 0x7de2 <rcv_spi>
    7d16:	f6 01       	movw	r30, r12
    7d18:	81 93       	st	Z+, r24
    7d1a:	6f 01       	movw	r12, r30
    7d1c:	ee 15       	cp	r30, r14
    7d1e:	ff 05       	cpc	r31, r15
    7d20:	c1 f7       	brne	.-16     	; 0x7d12 <disk_initialize+0xa4>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
    7d22:	89 81       	ldd	r24, Y+1	; 0x01
    7d24:	86 fd       	sbrc	r24, 6
    7d26:	03 c0       	rjmp	.+6      	; 0x7d2e <disk_initialize+0xc0>
    7d28:	e4 e0       	ldi	r30, 0x04	; 4
    7d2a:	fe 2e       	mov	r15, r30
    7d2c:	28 c0       	rjmp	.+80     	; 0x7d7e <disk_initialize+0x110>
    7d2e:	7c e0       	ldi	r23, 0x0C	; 12
    7d30:	f7 2e       	mov	r15, r23
    7d32:	25 c0       	rjmp	.+74     	; 0x7d7e <disk_initialize+0x110>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    7d34:	89 ee       	ldi	r24, 0xE9	; 233
    7d36:	40 e0       	ldi	r20, 0x00	; 0
    7d38:	50 e0       	ldi	r21, 0x00	; 0
    7d3a:	60 e0       	ldi	r22, 0x00	; 0
    7d3c:	70 e0       	ldi	r23, 0x00	; 0
    7d3e:	0e 94 a3 3d 	call	0x7b46	; 0x7b46 <send_cmd>
    7d42:	82 30       	cpi	r24, 0x02	; 2
    7d44:	28 f0       	brcs	.+10     	; 0x7d50 <disk_initialize+0xe2>
    7d46:	61 e4       	ldi	r22, 0x41	; 65
    7d48:	e6 2e       	mov	r14, r22
    7d4a:	ff 24       	eor	r15, r15
    7d4c:	f3 94       	inc	r15
    7d4e:	04 c0       	rjmp	.+8      	; 0x7d58 <disk_initialize+0xea>
    7d50:	59 ee       	ldi	r21, 0xE9	; 233
    7d52:	e5 2e       	mov	r14, r21
    7d54:	42 e0       	ldi	r20, 0x02	; 2
    7d56:	f4 2e       	mov	r15, r20
    7d58:	00 e1       	ldi	r16, 0x10	; 16
    7d5a:	17 e2       	ldi	r17, 0x27	; 39
    7d5c:	05 c0       	rjmp	.+10     	; 0x7d68 <disk_initialize+0xfa>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--) dly_100us();	/* Wait for leaving idle state */
    7d5e:	0e 94 e5 3e 	call	0x7dca	; 0x7dca <dly_100us>
    7d62:	01 50       	subi	r16, 0x01	; 1
    7d64:	10 40       	sbci	r17, 0x00	; 0
    7d66:	51 f0       	breq	.+20     	; 0x7d7c <disk_initialize+0x10e>
    7d68:	8e 2d       	mov	r24, r14
    7d6a:	40 e0       	ldi	r20, 0x00	; 0
    7d6c:	50 e0       	ldi	r21, 0x00	; 0
    7d6e:	60 e0       	ldi	r22, 0x00	; 0
    7d70:	70 e0       	ldi	r23, 0x00	; 0
    7d72:	0e 94 a3 3d 	call	0x7b46	; 0x7b46 <send_cmd>
    7d76:	88 23       	and	r24, r24
    7d78:	91 f7       	brne	.-28     	; 0x7d5e <disk_initialize+0xf0>
    7d7a:	18 c0       	rjmp	.+48     	; 0x7dac <disk_initialize+0x13e>
    7d7c:	ff 24       	eor	r15, r15
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    7d7e:	f0 92 0a 01 	sts	0x010A, r15
	deselect();
    7d82:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <deselect>
    7d86:	80 e0       	ldi	r24, 0x00	; 0
    7d88:	ff 20       	and	r15, r15
    7d8a:	09 f4       	brne	.+2      	; 0x7d8e <disk_initialize+0x120>
    7d8c:	81 e0       	ldi	r24, 0x01	; 1

	return ty ? 0 : STA_NOINIT;
}
    7d8e:	24 96       	adiw	r28, 0x04	; 4
    7d90:	e8 e0       	ldi	r30, 0x08	; 8
    7d92:	0c 94 92 3f 	jmp	0x7f24	; 0x7f24 <__epilogue_restores__+0x14>
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {			/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) dly_100us();	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    7d96:	8a e7       	ldi	r24, 0x7A	; 122
    7d98:	40 e0       	ldi	r20, 0x00	; 0
    7d9a:	50 e0       	ldi	r21, 0x00	; 0
    7d9c:	60 e0       	ldi	r22, 0x00	; 0
    7d9e:	70 e0       	ldi	r23, 0x00	; 0
    7da0:	0e 94 a3 3d 	call	0x7b46	; 0x7b46 <send_cmd>
    7da4:	88 23       	and	r24, r24
    7da6:	09 f4       	brne	.+2      	; 0x7daa <disk_initialize+0x13c>
    7da8:	b4 cf       	rjmp	.-152    	; 0x7d12 <disk_initialize+0xa4>
    7daa:	e8 cf       	rjmp	.-48     	; 0x7d7c <disk_initialize+0x10e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--) dly_100us();	/* Wait for leaving idle state */
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
    7dac:	80 e5       	ldi	r24, 0x50	; 80
    7dae:	40 e0       	ldi	r20, 0x00	; 0
    7db0:	52 e0       	ldi	r21, 0x02	; 2
    7db2:	60 e0       	ldi	r22, 0x00	; 0
    7db4:	70 e0       	ldi	r23, 0x00	; 0
    7db6:	0e 94 a3 3d 	call	0x7b46	; 0x7b46 <send_cmd>
    7dba:	88 23       	and	r24, r24
    7dbc:	f9 f6       	brne	.-66     	; 0x7d7c <disk_initialize+0x10e>
    7dbe:	df cf       	rjmp	.-66     	; 0x7d7e <disk_initialize+0x110>

00007dc0 <init_spi>:
; void init_spi (void);

.global init_spi
.func init_spi
init_spi:
	sbi	DDR_CS		; CS: output
    7dc0:	54 9a       	sbi	0x0a, 4	; 10
	sbi	DDR_DI		; DI: output
    7dc2:	23 9a       	sbi	0x04, 3	; 4
	sbi	DDR_CK		; SCLK: output
    7dc4:	25 9a       	sbi	0x04, 5	; 4
	sbi	PORT_DO		; DO: pull-up
    7dc6:	2c 9a       	sbi	0x05, 4	; 5
	ret
    7dc8:	08 95       	ret

00007dca <dly_100us>:
; void dly_us (UINT n);

.global dly_100us
.func dly_100us
dly_100us:
	ldi	r24, lo8(F_CPU / 100000)	/* Loop counter */
    7dca:	80 ea       	ldi	r24, 0xA0	; 160
1:	sbiw	r30, 1		/* 10 clocks per loop */
    7dcc:	31 97       	sbiw	r30, 0x01	; 1
	sbiw	r30, 1
    7dce:	31 97       	sbiw	r30, 0x01	; 1
	sbiw	r30, 1
    7dd0:	31 97       	sbiw	r30, 0x01	; 1
	nop
    7dd2:	00 00       	nop
	dec	r24
    7dd4:	8a 95       	dec	r24
	brne	1b
    7dd6:	d1 f7       	brne	.-12     	; 0x7dcc <dly_100us+0x2>
	ret
    7dd8:	08 95       	ret

00007dda <select>:
; void select (void);

.global select
.func select
select:
	rcall	deselect
    7dda:	02 d0       	rcall	.+4      	; 0x7de0 <deselect>
	cbi	PORT_CS
    7ddc:	5c 98       	cbi	0x0b, 4	; 11
	rjmp	rcv_spi
    7dde:	01 c0       	rjmp	.+2      	; 0x7de2 <rcv_spi>

00007de0 <deselect>:
; void deselect (void);

.global deselect
.func deselect
deselect:
	sbi	PORT_CS
    7de0:	5c 9a       	sbi	0x0b, 4	; 11

00007de2 <rcv_spi>:
; BYTE rcv_spi (void);

.global rcv_spi
.func rcv_spi
rcv_spi:
	ldi	r24, 0xFF	; Send 0xFF to receive data
    7de2:	8f ef       	ldi	r24, 0xFF	; 255

00007de4 <xmit_spi>:
; void xmit_spi (BYTE);

.global xmit_spi
.func xmit_spi
xmit_spi:
	ldi	r25, 8
    7de4:	98 e0       	ldi	r25, 0x08	; 8
1:	sbrc	r24, 7		; DI = Bit to sent
    7de6:	87 fd       	sbrc	r24, 7
	sbi	PORT_DI		; 
    7de8:	2b 9a       	sbi	0x05, 3	; 5
	sbrs	r24, 7		; 
    7dea:	87 ff       	sbrs	r24, 7
	cbi	PORT_DI		; /
    7dec:	2b 98       	cbi	0x05, 3	; 5
	lsl	r24		; Get DO from MMC
    7dee:	88 0f       	add	r24, r24
	sbic	PIN_DO		; 
    7df0:	1c 99       	sbic	0x03, 4	; 3
	inc	r24		; /
    7df2:	83 95       	inc	r24
	sbi	PORT_CK		; A positive pulse to SCLK
    7df4:	2d 9a       	sbi	0x05, 5	; 5
	cbi	PORT_CK		; /
    7df6:	2d 98       	cbi	0x05, 5	; 5
	dec	r25		; Repeat 8 times
    7df8:	9a 95       	dec	r25
	brne	1b		; /
    7dfa:	a9 f7       	brne	.-22     	; 0x7de6 <xmit_spi+0x2>
	ret
    7dfc:	08 95       	ret

00007dfe <flash_erase>:

.global flash_erase
.func flash_erase
flash_erase:

	movw	ZL, r22
    7dfe:	fb 01       	movw	r30, r22
#if FLASHEND >= 0x10000
	out	_SFR_IO_ADDR(RAMPZ), r24
#endif

	; Initiate erase operation
	ldi	r24, 0b00000011
    7e00:	83 e0       	ldi	r24, 0x03	; 3
	sts	_SFR_MEM_ADDR(SPMCSR), r24
    7e02:	80 93 57 00 	sts	0x0057, r24
	spm
    7e06:	e8 95       	spm

	; Wait for end of erase operation
1:	lds	r24, _SFR_MEM_ADDR(SPMCSR)
    7e08:	80 91 57 00 	lds	r24, 0x0057
	sbrc	r24, 0
    7e0c:	80 fd       	sbrc	r24, 0
	rjmp	1b
    7e0e:	fc cf       	rjmp	.-8      	; 0x7e08 <flash_erase+0xa>

	; Re-enable read access to the flash
	ldi	r24, 0b00010001
    7e10:	81 e1       	ldi	r24, 0x11	; 17
	sts	_SFR_MEM_ADDR(SPMCSR), r24
    7e12:	80 93 57 00 	sts	0x0057, r24
	spm
    7e16:	e8 95       	spm

9:	ret
    7e18:	08 95       	ret

00007e1a <flash_write>:
; void flash_write (DWORD flash_addr, const BYTE* data);

.global flash_write
.func flash_write
flash_write:
	push	r0
    7e1a:	0f 92       	push	r0
	push	r1
    7e1c:	1f 92       	push	r1
#if FLASHEND >= 0x10000
	out	_SFR_IO_ADDR(RAMPZ), r24
#endif

	; Fill page buffer
	movw	ZL, r22
    7e1e:	fb 01       	movw	r30, r22
	movw	XL, r20
    7e20:	da 01       	movw	r26, r20
	ldi	r25, lo8(SPM_PAGESIZE/2)
    7e22:	90 e4       	ldi	r25, 0x40	; 64
1:	ld	r0, X+
    7e24:	0d 90       	ld	r0, X+
	ld	r1, X+
    7e26:	1d 90       	ld	r1, X+
	ldi	r24, 0b00000001
    7e28:	81 e0       	ldi	r24, 0x01	; 1
	sts	_SFR_MEM_ADDR(SPMCSR), r24
    7e2a:	80 93 57 00 	sts	0x0057, r24
	spm
    7e2e:	e8 95       	spm
	adiw	ZL, 2
    7e30:	32 96       	adiw	r30, 0x02	; 2
	dec	r25
    7e32:	9a 95       	dec	r25
	brne	1b
    7e34:	b9 f7       	brne	.-18     	; 0x7e24 <flash_write+0xa>

	; Initiate write operation
	movw	ZL, r22
    7e36:	fb 01       	movw	r30, r22
	ldi	r24, 0b00000101
    7e38:	85 e0       	ldi	r24, 0x05	; 5
	sts	_SFR_MEM_ADDR(SPMCSR), r24
    7e3a:	80 93 57 00 	sts	0x0057, r24
	spm
    7e3e:	e8 95       	spm

	; Wait for end of write operation
2:	lds	r24, _SFR_MEM_ADDR(SPMCSR)
    7e40:	80 91 57 00 	lds	r24, 0x0057
	sbrc	r24, 0
    7e44:	80 fd       	sbrc	r24, 0
	rjmp	2b
    7e46:	fc cf       	rjmp	.-8      	; 0x7e40 <flash_write+0x26>

	; Re-enable read access to the flash
	ldi	r24, 0b00010001
    7e48:	81 e1       	ldi	r24, 0x11	; 17
	sts	_SFR_MEM_ADDR(SPMCSR), r24
    7e4a:	80 93 57 00 	sts	0x0057, r24
	spm
    7e4e:	e8 95       	spm

9:	pop	r1
    7e50:	1f 90       	pop	r1
	pop	r0
    7e52:	0f 90       	pop	r0
	ret
    7e54:	08 95       	ret

00007e56 <__mulsi3>:
    7e56:	62 9f       	mul	r22, r18
    7e58:	d0 01       	movw	r26, r0
    7e5a:	73 9f       	mul	r23, r19
    7e5c:	f0 01       	movw	r30, r0
    7e5e:	82 9f       	mul	r24, r18
    7e60:	e0 0d       	add	r30, r0
    7e62:	f1 1d       	adc	r31, r1
    7e64:	64 9f       	mul	r22, r20
    7e66:	e0 0d       	add	r30, r0
    7e68:	f1 1d       	adc	r31, r1
    7e6a:	92 9f       	mul	r25, r18
    7e6c:	f0 0d       	add	r31, r0
    7e6e:	83 9f       	mul	r24, r19
    7e70:	f0 0d       	add	r31, r0
    7e72:	74 9f       	mul	r23, r20
    7e74:	f0 0d       	add	r31, r0
    7e76:	65 9f       	mul	r22, r21
    7e78:	f0 0d       	add	r31, r0
    7e7a:	99 27       	eor	r25, r25
    7e7c:	72 9f       	mul	r23, r18
    7e7e:	b0 0d       	add	r27, r0
    7e80:	e1 1d       	adc	r30, r1
    7e82:	f9 1f       	adc	r31, r25
    7e84:	63 9f       	mul	r22, r19
    7e86:	b0 0d       	add	r27, r0
    7e88:	e1 1d       	adc	r30, r1
    7e8a:	f9 1f       	adc	r31, r25
    7e8c:	bd 01       	movw	r22, r26
    7e8e:	cf 01       	movw	r24, r30
    7e90:	11 24       	eor	r1, r1
    7e92:	08 95       	ret

00007e94 <__udivmodsi4>:
    7e94:	a1 e2       	ldi	r26, 0x21	; 33
    7e96:	1a 2e       	mov	r1, r26
    7e98:	aa 1b       	sub	r26, r26
    7e9a:	bb 1b       	sub	r27, r27
    7e9c:	fd 01       	movw	r30, r26
    7e9e:	0d c0       	rjmp	.+26     	; 0x7eba <__udivmodsi4_ep>

00007ea0 <__udivmodsi4_loop>:
    7ea0:	aa 1f       	adc	r26, r26
    7ea2:	bb 1f       	adc	r27, r27
    7ea4:	ee 1f       	adc	r30, r30
    7ea6:	ff 1f       	adc	r31, r31
    7ea8:	a2 17       	cp	r26, r18
    7eaa:	b3 07       	cpc	r27, r19
    7eac:	e4 07       	cpc	r30, r20
    7eae:	f5 07       	cpc	r31, r21
    7eb0:	20 f0       	brcs	.+8      	; 0x7eba <__udivmodsi4_ep>
    7eb2:	a2 1b       	sub	r26, r18
    7eb4:	b3 0b       	sbc	r27, r19
    7eb6:	e4 0b       	sbc	r30, r20
    7eb8:	f5 0b       	sbc	r31, r21

00007eba <__udivmodsi4_ep>:
    7eba:	66 1f       	adc	r22, r22
    7ebc:	77 1f       	adc	r23, r23
    7ebe:	88 1f       	adc	r24, r24
    7ec0:	99 1f       	adc	r25, r25
    7ec2:	1a 94       	dec	r1
    7ec4:	69 f7       	brne	.-38     	; 0x7ea0 <__udivmodsi4_loop>
    7ec6:	60 95       	com	r22
    7ec8:	70 95       	com	r23
    7eca:	80 95       	com	r24
    7ecc:	90 95       	com	r25
    7ece:	9b 01       	movw	r18, r22
    7ed0:	ac 01       	movw	r20, r24
    7ed2:	bd 01       	movw	r22, r26
    7ed4:	cf 01       	movw	r24, r30
    7ed6:	08 95       	ret

00007ed8 <__prologue_saves__>:
    7ed8:	2f 92       	push	r2
    7eda:	3f 92       	push	r3
    7edc:	4f 92       	push	r4
    7ede:	5f 92       	push	r5
    7ee0:	6f 92       	push	r6
    7ee2:	7f 92       	push	r7
    7ee4:	8f 92       	push	r8
    7ee6:	9f 92       	push	r9
    7ee8:	af 92       	push	r10
    7eea:	bf 92       	push	r11
    7eec:	cf 92       	push	r12
    7eee:	df 92       	push	r13
    7ef0:	ef 92       	push	r14
    7ef2:	ff 92       	push	r15
    7ef4:	0f 93       	push	r16
    7ef6:	1f 93       	push	r17
    7ef8:	cf 93       	push	r28
    7efa:	df 93       	push	r29
    7efc:	cd b7       	in	r28, 0x3d	; 61
    7efe:	de b7       	in	r29, 0x3e	; 62
    7f00:	ca 1b       	sub	r28, r26
    7f02:	db 0b       	sbc	r29, r27
    7f04:	0f b6       	in	r0, 0x3f	; 63
    7f06:	f8 94       	cli
    7f08:	de bf       	out	0x3e, r29	; 62
    7f0a:	0f be       	out	0x3f, r0	; 63
    7f0c:	cd bf       	out	0x3d, r28	; 61
    7f0e:	09 94       	ijmp

00007f10 <__epilogue_restores__>:
    7f10:	2a 88       	ldd	r2, Y+18	; 0x12
    7f12:	39 88       	ldd	r3, Y+17	; 0x11
    7f14:	48 88       	ldd	r4, Y+16	; 0x10
    7f16:	5f 84       	ldd	r5, Y+15	; 0x0f
    7f18:	6e 84       	ldd	r6, Y+14	; 0x0e
    7f1a:	7d 84       	ldd	r7, Y+13	; 0x0d
    7f1c:	8c 84       	ldd	r8, Y+12	; 0x0c
    7f1e:	9b 84       	ldd	r9, Y+11	; 0x0b
    7f20:	aa 84       	ldd	r10, Y+10	; 0x0a
    7f22:	b9 84       	ldd	r11, Y+9	; 0x09
    7f24:	c8 84       	ldd	r12, Y+8	; 0x08
    7f26:	df 80       	ldd	r13, Y+7	; 0x07
    7f28:	ee 80       	ldd	r14, Y+6	; 0x06
    7f2a:	fd 80       	ldd	r15, Y+5	; 0x05
    7f2c:	0c 81       	ldd	r16, Y+4	; 0x04
    7f2e:	1b 81       	ldd	r17, Y+3	; 0x03
    7f30:	aa 81       	ldd	r26, Y+2	; 0x02
    7f32:	b9 81       	ldd	r27, Y+1	; 0x01
    7f34:	ce 0f       	add	r28, r30
    7f36:	d1 1d       	adc	r29, r1
    7f38:	0f b6       	in	r0, 0x3f	; 63
    7f3a:	f8 94       	cli
    7f3c:	de bf       	out	0x3e, r29	; 62
    7f3e:	0f be       	out	0x3f, r0	; 63
    7f40:	cd bf       	out	0x3d, r28	; 61
    7f42:	ed 01       	movw	r28, r26
    7f44:	08 95       	ret

00007f46 <memset>:
    7f46:	dc 01       	movw	r26, r24
    7f48:	01 c0       	rjmp	.+2      	; 0x7f4c <memset+0x6>
    7f4a:	6d 93       	st	X+, r22
    7f4c:	41 50       	subi	r20, 0x01	; 1
    7f4e:	50 40       	sbci	r21, 0x00	; 0
    7f50:	e0 f7       	brcc	.-8      	; 0x7f4a <memset+0x4>
    7f52:	08 95       	ret

00007f54 <_exit>:
    7f54:	f8 94       	cli

00007f56 <__stop_program>:
    7f56:	ff cf       	rjmp	.-2      	; 0x7f56 <__stop_program>
